<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tornado</title>
  
  <subtitle>Veiasai&#39;s Zone</subtitle>
  <link href="http://veiasai.github.io/atom.xml" rel="self"/>
  
  <link href="http://veiasai.github.io/"/>
  <updated>2023-11-06T04:04:47.654Z</updated>
  <id>http://veiasai.github.io/</id>
  
  <author>
    <name>Veiasai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读爱情</title>
    <link href="http://veiasai.github.io/2021/11/05/%E9%98%85%E8%AF%BB%E7%88%B1%E6%83%85/"/>
    <id>http://veiasai.github.io/2021/11/05/%E9%98%85%E8%AF%BB%E7%88%B1%E6%83%85/</id>
    <published>2021-11-05T08:13:08.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>时隔良久，再度谈论爱情。要说契机呢，可能是这个人自己沉浸爱情一年多了，恰巧最近又见证别人的分分合合，感触颇多。</p><h2 id="关于想要的"><a href="#关于想要的" class="headerlink" title="关于想要的"></a>关于想要的</h2><p>记得之前我说，目标是寻找一个和我一起探究，为什么会有人愿意在爱情里拉扯，这个问题的人。</p><p>这真的是个非常妙的描述，如果你抱着这种想法去恋爱，心境会自然许多。不会问为什么她不爱我，为什么她不回消息，为什么她生气了。</p><p>因为本就是来学习的，反馈已经给出，答案只能自寻。</p><p>虽然，事实上，两个人都这样想的话，就很少会生气了。</p><h2 id="关于拥有的"><a href="#关于拥有的" class="headerlink" title="关于拥有的"></a>关于拥有的</h2><p>每过一段时间，我都感到有被刷新认知。比如说，原来恋爱是牵牵手，原来恋爱是时不时的嘤嘤嘤，原来恋爱是旅游逛街，谈天说地。</p><p>我从未自满，始终抱有敬畏，也因此我可能永远不会完整认识到，我拥有了什么。</p><p>如果你细数一些小事，那可能会是，有人和你说早安晚安，有人在你无聊时陪伴。</p><p>可是呢，这个人拥有与你同样崇高的灵魂，我会拥有她的所有吗？</p><h2 id="关于失去的"><a href="#关于失去的" class="headerlink" title="关于失去的"></a>关于失去的</h2><p>没有发现有什么明显的失去，非要说的话可能是一些自由时间，但总的来说还好，我觉得个人时间仍是非常足够的。</p><h2 id="关于世界"><a href="#关于世界" class="headerlink" title="关于世界"></a>关于世界</h2><p>如果和一个人恋爱，你将会得到特别多的机会，去感知别人是怎么看待这个世界的。</p><p>难免地，在一些问题上，每个人的看法会不同，甚至有非常大的区别。在那种时刻，有些人的处理方式就是坚持自我，不说不念，你爱懂不懂。我挺羡慕那种方式的，大概率这个人从不缺怜爱。更为成熟的方式应该还是多沟通交流，一次两次之后就会理解别人的想法了。</p><h2 id="关于金钱"><a href="#关于金钱" class="headerlink" title="关于金钱"></a>关于金钱</h2><p>不自觉想到很多句子，”没有物质的爱情只是一盘散沙，都不用风吹，走几步就散了”。</p><p>我总觉得，钱可以避免很多不必要的烦恼，不用纠结今天是不是浪费了一些东西，不用纠结是打车还是地铁，一些小的细节可以全凭喜好。</p><h2 id="无数唯一多少最"><a href="#无数唯一多少最" class="headerlink" title="无数唯一多少最"></a>无数唯一多少最</h2><p>最后的最后，不免想要问一问世上是否真的有唯一。</p><p>想来一直都是一会相信有，一会不相信有。反反复复之间顽童意识到，许多东西都是可复制的，儿时会为了两枚硬币落泪，长大了方知根本不值一提。</p><p>爱情也是一样，一旦经历过拥有和失去，就认识到没有什么无可替代。</p><p>可是啊，可是。</p><p>人是很难给自己的人生设定界限的，人是一种善于反悔的动物，即使你告诉自己世上没有唯一，你还是会有一天沉迷其中，也许以后会清醒，也许永远不会。</p><p>在每一句我爱你之间，你一直是我的唯一和最爱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时隔良久，再度谈论爱情。要说契机呢，可能是这个人自己沉浸爱情一年多了，恰巧最近又见证别人的分分合合，感触颇多。&lt;/p&gt;
&lt;h2 id=&quot;关于想要的&quot;&gt;&lt;a href=&quot;#关于想要的&quot; class=&quot;headerlink&quot; title=&quot;关于想要的&quot;&gt;&lt;/a&gt;关于想要的&lt;/h</summary>
      
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Love" scheme="http://veiasai.github.io/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>自己动手写Docker-CPP-2</title>
    <link href="http://veiasai.github.io/2020/12/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Docker-CPP-2/"/>
    <id>http://veiasai.github.io/2020/12/29/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Docker-CPP-2/</id>
    <published>2020-12-29T11:11:14.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上个版本中，我们实现了容器的基本操作。这一次将实现容器网络部分。</p><h2 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h2><p>纵观OCI Runtime标准，并没有定义网络标准。根据学习和推测，我认为它是通过hook实现的网络设置。</p><p>Hook就是一些在容器特定<a href="https://github.com/opencontainers/runtime-spec/blob/master/runtime.md#lifecycle" target="_blank" rel="noopener">生命周期</a>被调用的程序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">"hooks": &#123;</span><br><span class="line">    "prestart": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/fix-mounts"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [<span class="string">"fix-mounts"</span>, <span class="string">"arg1"</span>, <span class="string">"arg2"</span>],</span><br><span class="line">            <span class="attr">"env"</span>:  [ <span class="string">"key1=value1"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/setup-network"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "createRuntime": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/fix-mounts"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [<span class="string">"fix-mounts"</span>, <span class="string">"arg1"</span>, <span class="string">"arg2"</span>],</span><br><span class="line">            <span class="attr">"env"</span>:  [ <span class="string">"key1=value1"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/setup-network"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "createContainer": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/mount-hook"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [<span class="string">"-mount"</span>, <span class="string">"arg1"</span>, <span class="string">"arg2"</span>],</span><br><span class="line">            <span class="attr">"env"</span>:  [ <span class="string">"key1=value1"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "startContainer": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/refresh-ldcache"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "poststart": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/bin/notify-start"</span>,</span><br><span class="line">            <span class="attr">"timeout"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    "poststop": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"/usr/sbin/cleanup.sh"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [<span class="string">"cleanup.sh"</span>, <span class="string">"-f"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如这个例子所示，在创建容器时，我们让Runtime调用setup-network程序。</p><h3 id="Persistent-Namespace"><a href="#Persistent-Namespace" class="headerlink" title="Persistent Namespace"></a>Persistent Namespace</h3><p>在第一个版本里，我们并没有在创建容器时调用<code>pviot_root</code>，而是在运行容器时才更换系统目录，创建新的命名空间。这将无法满足<code>createContainer hook</code>的要求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Executed in Container NS) During the create operation, after the runtime environment has been created and before the pivot root or any equivalent operation.</span><br></pre></td></tr></table></figure><p>要实现这个hook，我们要在创建容器时就创建命名空间，并且允许hook程序对这些命名空间做一些操作。当我们运行容器时，之前的改动都必须还在，所以这些命名空间必须被持久化。</p><p>根据Linux手册，命名空间存放在<code>/proc/&lt;PID&gt;/ns/*flie</code>，当进程退出时，这些文件也就释放掉了，除非这些文件被bind-mount到另外的地方。</p><p><code>mount(&quot;/proc/pid/ns/net&quot;, &quot;/home/ubuntu/container/ns/net&quot;, MS_BIND, nullptr)</code></p><p>之后，可以通过setns函数来恢复这些命名空间。</p><p>其中困难的地方在于</p><ol><li>mnt ns必须被挂在Private mount point</li><li>pid ns没有必要持久化，必须保持容器进程运行，再将hook程序加入对应pid ns。每次容器运行，都创建新的pid ns</li></ol><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p><a href="https://github.com/genuinetools/netns" target="_blank" rel="noopener">Network Hook</a></p><p>Github上有一个现成的hook供我们使用，叫做netns。我们可以先用netns验证runtime工作正常，以后再实现自己的hook，从而达成全部自己实现的目标。</p><p>通过netns源码可知，在启动netns时，runtime需要将容器的status传递到netns的stdin。因为我在上一版本中，已经实现了将status保存为文件，这里只要将status.file打开，并设置fd为stdin，之后调用exec运行hook，将fd传递给子进程，就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// posix ensure it opens the least available fd</span></span><br><span class="line">close(<span class="built_in">stdin</span>);</span><br><span class="line">open(<span class="string">"status.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"status.json"</span>);</span><br><span class="line">dup2(fd, <span class="built_in">stdin</span>);</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><p>status里带有pid，netns通过访问/proc/pid/ns，获取到目标network namespace，再将创建的veth link过去。</p><p>netns默认没有打开bridge的转发功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudp ifconfig &lt;bridgename&gt; up</span><br><span class="line">sudo iptables -A FORWARD -o br0 -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -i br0 -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s &lt;subnet&gt; ! -o &lt;bridgename&gt; -j MASQUERADE</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上个版本中，我们实现了容器的基本操作。这一次将实现容器网络部分。&lt;/p&gt;
&lt;h2 id=&quot;Hook&quot;&gt;&lt;a href=&quot;#Hook&quot; cl</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="System" scheme="http://veiasai.github.io/tags/System/"/>
    
    <category term="Unix" scheme="http://veiasai.github.io/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>2020-年度总结</title>
    <link href="http://veiasai.github.io/2020/12/29/2020-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://veiasai.github.io/2020/12/29/2020-%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-29T11:10:38.000Z</published>
    <updated>2023-11-06T04:04:47.626Z</updated>
    
    <content type="html"><![CDATA[<p>我在哪里。</p><a id="more"></a><h2 id="艰难一年"><a href="#艰难一年" class="headerlink" title="艰难一年"></a>艰难一年</h2><p>今年对很多人来说，是异常艰难的一年，我们一起见证了新冠肺炎，美股熔断，全城封锁等诸多事件。而我，也经历了人生又一个转折点。顺利地从交大毕业，成为社会人，打工仔。</p><p>这一年里，完成了曾经憧憬不已的毕业论文，开始以为会是非常艰深而有意思的工作，后来发现自己终究是才疏学浅，只能尽量写一点。</p><h2 id="上"><a href="#上" class="headerlink" title="上"></a>上</h2><p>记得这时，还在忙毕业论文的事情，导师希望我顺带地水一篇论文到期刊会议上，<br>对我这个微小的个体来说，记忆里全是窝在家里写论文，打游戏之类的。</p><p>想着这最后半年会有不少空闲时光，就报名了学车，甚至幻想有空出去旅游一趟，奈何疫情让一切都成空。<br>最后是疫情好转了一些之后，过去学了一段时间，在工作接着周末有空去学一学。虽然开车很难，但考试很简单，中国人做题属实有一套。<br>而且，学车这件事让我大开眼界。现在回过头看，它是完完全全的考试导向，倒车不用左顾右盼，只用盯着看是不是到了固定点位，做题甚至不用读题，只需要记一些奇怪的口诀，其中最令我吃惊的口诀是类似于，如果答案出现1、2、3、4，选3，如果是2、3、4、5，选2之类的。</p><p>在家里呆久了就觉得无聊，屏幕太小，椅子桌子也不怎么合适，说不上来是时代在进步，科技在发展，还是我变得挑剔了，总之在很多方面都喜欢更精致一些。</p><h2 id="下"><a href="#下" class="headerlink" title="下"></a>下</h2><p>在公司工作，脑子里还是以前实习那一套，觉得事情都比较简单，学的很多东西都派不上用场。</p><p>直到我真正犯了一些错误，反思的时候才意识到，在工作中输出自己的能力，是另一种艺术。</p><p>比方说，凡事要遵循个流程，该汇报的汇报，该开会的开会，这并不是形式主义，扪心自问，是否让别人都清楚了你的工作。</p><p>我个人感觉就是不停在换位思考，如果我是提出需求的，我希望对方怎么做。如果我现在是提出方案的，我又希望对方怎么做。在小公司里我的确有机会扮演各种角色，这让我体会到许多。</p><p>反思就会发现不足，从而做的更细致。就像打游戏拉扯，讲的是细节。</p><p>但总体来说我十分乐观，这些所谓工作的技巧，在三五年后，大概都会达到顶峰吧，并没有什么难的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我在哪里。&lt;/p&gt;</summary>
    
    
    
    <category term="Annual-Summary" scheme="http://veiasai.github.io/categories/Annual-Summary/"/>
    
    
  </entry>
  
  <entry>
    <title>自己动手写Docker-CPP</title>
    <link href="http://veiasai.github.io/2020/11/17/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Docker-CPP/"/>
    <id>http://veiasai.github.io/2020/11/17/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99Docker-CPP/</id>
    <published>2020-11-17T10:55:16.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>该项目以《自己动手写Docker》一书作为参考，实现简易容器。<br>与原书不同的是：</p><ol><li>使用cpp实现。</li><li>严格遵守OCI标准，仅仅实现runtime，不包括其他行为。</li></ol><p>容器工具命名为<code>Grid</code>。</p><h2 id="OCI-Runtime-Spec"><a href="#OCI-Runtime-Spec" class="headerlink" title="OCI Runtime Spec"></a>OCI Runtime Spec</h2><p><a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">opencontainers/runtime-spec</a></p><p>runtime主要实现以下几个操作：</p><ol><li><code>create &lt;container-id&gt; &lt;path-to-bundle&gt;</code></li><li><code>start &lt;container-id&gt;</code></li><li><code>kill &lt;container-id&gt; &lt;signal&gt;</code></li><li><code>delete &lt;container-id&gt;</code></li></ol><p>bundle可以被认为是镜像、Rootfs等概念，即包含了一个容器所必须的文件系统部分。</p><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p>获取一个bundle示例，可以通过如下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker create --name box busybox</span><br><span class="line">docker <span class="built_in">export</span> box -o busybox.tar</span><br><span class="line">mkdir busybox</span><br><span class="line">tar -xf busybox.tar -C busybox</span><br><span class="line">docker rm box</span><br></pre></td></tr></table></figure><p>export将busybox镜像提取成tar包，解压后就可以认为是一个bundle。在bundle下还需要有一个配置文件<code>config.json</code>。可以参照<a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md" target="_blank" rel="noopener">标准</a>，创建一个。</p><p>现在，假定我们可以执行<code>./Grid create busybox /tmp/busybox</code>。</p><p>我们需要的代码模块有命令行参数解析，Json文件解析。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>由于runtime的输入都是positional args，cpp的各种命令行库都不能明显帮助减少工作量。至少有以下三种可行的方案：</p><ol><li>直接使用argv</li><li>boost option</li><li>GFlag</li></ol><h3 id="Json文件解析"><a href="#Json文件解析" class="headerlink" title="Json文件解析"></a>Json文件解析</h3><p>Jsoncpp的接口较为简单，易于使用。</p><h3 id="AUFS"><a href="#AUFS" class="headerlink" title="AUFS"></a>AUFS</h3><p>成功解析命令行参数和配置文件后，接下来完成Create命令需要做的事情。严格来说，并没有任何关于实现的限定，不管是虚拟机，还是Namespace+AUFS，都是可以达成runtime要求的实现。</p><p>参照Docker的实现，我们需要创建一个AUFS，并且将容器状态持久化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/Grid</span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── containers</span><br><span class="line">│   ├── firstcontainer</span><br><span class="line">│   │   ├── mntFolder</span><br><span class="line">│   │   │   ├── bin</span><br><span class="line">│   │   │   ├── dev</span><br><span class="line">│   │   │   │   ├── pts</span><br><span class="line">│   │   │   │   └── shm</span><br><span class="line">│   │   │   ├── etc</span><br><span class="line">│   │   │   │   └── network</span><br><span class="line">│   │   │   │       ├── <span class="keyword">if</span>-down.d</span><br><span class="line">│   │   │   │       ├── <span class="keyword">if</span>-post-down.d</span><br><span class="line">│   │   │   │       ├── <span class="keyword">if</span>-pre-up.d</span><br><span class="line">│   │   │   │       └── <span class="keyword">if</span>-up.d</span><br><span class="line">│   │   │   ├── home</span><br><span class="line">│   │   │   ├── proc</span><br><span class="line">│   │   │   ├── root</span><br><span class="line">│   │   │   ├── sys</span><br><span class="line">│   │   │   ├── tmp</span><br><span class="line">│   │   │   ├── usr</span><br><span class="line">│   │   │   │   └── sbin</span><br><span class="line">│   │   │   └── var</span><br><span class="line">│   │   │       ├── spool</span><br><span class="line">│   │   │       │   └── mail</span><br><span class="line">│   │   │       └── www</span><br><span class="line">│   │   └── writeLayer</span><br><span class="line">│   └── secondcontainer</span><br><span class="line">│       ├── mntFolder</span><br><span class="line">│       │   ├── bin</span><br><span class="line">│       │   ├── dev</span><br><span class="line">│       │   │   ├── pts</span><br><span class="line">│       │   │   └── shm</span><br><span class="line">│       │   ├── etc</span><br><span class="line">│       │   │   └── network</span><br><span class="line">│       │   │       ├── <span class="keyword">if</span>-down.d</span><br><span class="line">│       │   │       ├── <span class="keyword">if</span>-post-down.d</span><br><span class="line">│       │   │       ├── <span class="keyword">if</span>-pre-up.d</span><br><span class="line">│       │   │       └── <span class="keyword">if</span>-up.d</span><br><span class="line">│       │   ├── home</span><br><span class="line">│       │   ├── proc</span><br><span class="line">│       │   ├── root</span><br><span class="line">│       │   ├── sys</span><br><span class="line">│       │   ├── tmp</span><br><span class="line">│       │   ├── usr</span><br><span class="line">│       │   │   └── sbin</span><br><span class="line">│       │   └── var</span><br><span class="line">│       │       ├── spool</span><br><span class="line">│       │       │   └── mail</span><br><span class="line">│       │       └── www</span><br><span class="line">│       └── writeLayer</span><br><span class="line">└── images</span><br><span class="line">    ├── busybox</span><br><span class="line">    │   ├── bin</span><br><span class="line">    │   ├── dev</span><br><span class="line">    │   │   ├── pts</span><br><span class="line">    │   │   └── shm</span><br><span class="line">    │   ├── etc</span><br><span class="line">    │   │   └── network</span><br><span class="line">    │   │       ├── <span class="keyword">if</span>-down.d</span><br><span class="line">    │   │       ├── <span class="keyword">if</span>-post-down.d</span><br><span class="line">    │   │       ├── <span class="keyword">if</span>-pre-up.d</span><br><span class="line">    │   │       └── <span class="keyword">if</span>-up.d</span><br><span class="line">    │   ├── home</span><br><span class="line">    │   ├── proc</span><br><span class="line">    │   ├── root</span><br><span class="line">    │   ├── sys</span><br><span class="line">    │   ├── tmp</span><br><span class="line">    │   ├── usr</span><br><span class="line">    │   │   └── sbin</span><br><span class="line">    │   └── var</span><br><span class="line">    │       ├── spool</span><br><span class="line">    │       │   └── mail</span><br><span class="line">    │       └── www</span><br><span class="line">    └── ubuntu</span><br></pre></td></tr></table></figure><p>我们对容器和镜像的存储如上图所示，分为container和images两个目录。</p><ul><li>images<ul><li>将刚才获取的bundle，放在images下。</li></ul></li><li>containers<ul><li>创建一个新的容器，containers目录下就会新创建一个目录，名字和容器id相同。</li><li>容器id目录下有writeLayer，mntFolder和status.json</li></ul></li></ul><p>wrtieLayer和mntFolder是两个空目录，然后执行</p><p><code>mount -t aufs -o br:/home/Grid/fristcontainer/writeLayer=rw:/home/Grid/images/busybox=ro none /home/Grid/fristcontainer/mntFolder</code></p><p>在简易版本里，可以通过调用外部命令实现mount，未来可以改进为直接使用system call。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> branches = <span class="string">"br:"</span> + writelayer + <span class="string">"=rw:"</span> + rolayer + <span class="string">"=ro"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> command = <span class="string">"mount -t aufs -o "</span> + branches + <span class="string">" none "</span> + mntfolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (system(command.c_str()) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"aufs mount fail!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在status.json里写入</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"Bundle"</span> : <span class="string">"/home/ubuntu/Grid/images/busybox"</span>,</span><br><span class="line">   <span class="string">"Created"</span> : <span class="literal">true</span>,</span><br><span class="line">   <span class="string">"Creating"</span> : <span class="literal">false</span>,</span><br><span class="line">   <span class="string">"ID"</span> : <span class="string">"firstcontainer"</span>,</span><br><span class="line">   <span class="string">"OCIVersion"</span> : <span class="string">""</span>,</span><br><span class="line">   <span class="string">"Pid"</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="string">"Running"</span> : <span class="literal">false</span>,</span><br><span class="line">   <span class="string">"Stopped"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件可用任意格式，仅用作维护内部状态，在调用start、kill时，修改status内容。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>容器创建好后，便可以开始运行。</p><p>在最初的版本里，我们先实现交互式的容器。</p><p>大致工作流程如下：</p><ol><li>运行Grid <code>./Gird start firstcontainer</code> (通过环境变量指定Grid配置，帮助找到容器存储目录)</li><li>加载配置，加载容器信息</li><li>调用 <code>clone(InitProcess, stackTop, CLONE_NEWUTS | CLONE_NEWPID | CLONE_NEWNS | CLONE_NEWNET | CLONE_NEWIPC | SIGCHLD, this);</code> 创建一个子线程，并且在不同的命名空间里。</li><li>父进程 <code>waitid(P_PID, child_process, &amp;siginfo, WEXITED);</code> 等待子进程退出</li><li>子进程<ul><li>Pivot_root</li><li>mount proc, tmp</li><li>execve</li></ul></li></ol><p>config.json in bundle</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"process"</span>: &#123;</span><br><span class="line">    <span class="attr">"terminal"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"consoleSize"</span>: &#123;</span><br><span class="line">        <span class="attr">"height"</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">"width"</span>: <span class="number">80</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"gid"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"umask"</span>: <span class="number">63</span>,</span><br><span class="line">        <span class="attr">"additionalGids"</span>: [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"env"</span>: [</span><br><span class="line">        <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">        <span class="string">"TERM=xterm"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"/root"</span>,</span><br><span class="line">    <span class="attr">"args"</span>: [</span><br><span class="line">        <span class="string">"sh"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"apparmorProfile"</span>: <span class="string">"acme_secure_profile"</span>,</span><br><span class="line">    <span class="attr">"selinuxLabel"</span>: <span class="string">"system_u:system_r:svirt_lxc_net_t:s0:c124,c675"</span>,</span><br><span class="line">    <span class="attr">"noNewPrivileges"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"capabilities"</span>: &#123;</span><br><span class="line">        <span class="attr">"bounding"</span>: [</span><br><span class="line">            <span class="string">"CAP_AUDIT_WRITE"</span>,</span><br><span class="line">            <span class="string">"CAP_KILL"</span>,</span><br><span class="line">            <span class="string">"CAP_NET_BIND_SERVICE"</span></span><br><span class="line">        ],</span><br><span class="line">       <span class="attr">"permitted"</span>: [</span><br><span class="line">            <span class="string">"CAP_AUDIT_WRITE"</span>,</span><br><span class="line">            <span class="string">"CAP_KILL"</span>,</span><br><span class="line">            <span class="string">"CAP_NET_BIND_SERVICE"</span></span><br><span class="line">        ],</span><br><span class="line">       <span class="attr">"inheritable"</span>: [</span><br><span class="line">            <span class="string">"CAP_AUDIT_WRITE"</span>,</span><br><span class="line">            <span class="string">"CAP_KILL"</span>,</span><br><span class="line">            <span class="string">"CAP_NET_BIND_SERVICE"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"effective"</span>: [</span><br><span class="line">            <span class="string">"CAP_AUDIT_WRITE"</span>,</span><br><span class="line">            <span class="string">"CAP_KILL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"ambient"</span>: [</span><br><span class="line">            <span class="string">"CAP_NET_BIND_SERVICE"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rlimits"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"RLIMIT_NOFILE"</span>,</span><br><span class="line">            <span class="attr">"hard"</span>: <span class="number">1024</span>,</span><br><span class="line">            <span class="attr">"soft"</span>: <span class="number">1024</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个版本只需要支持terminal, env, args。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目概述&quot;&gt;&lt;a href=&quot;#项目概述&quot; class=&quot;headerlink&quot; title=&quot;项目概述&quot;&gt;&lt;/a&gt;项目概述&lt;/h2&gt;&lt;p&gt;该项目以《自己动手写Docker》一书作为参考，实现简易容器。&lt;br&gt;与原书不同的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用cpp</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="System" scheme="http://veiasai.github.io/tags/System/"/>
    
    <category term="Unix" scheme="http://veiasai.github.io/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>数十公里的折返跑</title>
    <link href="http://veiasai.github.io/2020/07/11/%E6%95%B0%E5%8D%81%E5%85%AC%E9%87%8C%E7%9A%84%E6%8A%98%E8%BF%94%E8%B7%91/"/>
    <id>http://veiasai.github.io/2020/07/11/%E6%95%B0%E5%8D%81%E5%85%AC%E9%87%8C%E7%9A%84%E6%8A%98%E8%BF%94%E8%B7%91/</id>
    <published>2020-07-11T01:18:05.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可能是关于毕业的最后一段"><a href="#可能是关于毕业的最后一段" class="headerlink" title="可能是关于毕业的最后一段"></a>可能是关于毕业的最后一段</h2><h3 id="十个小时的奔袭"><a href="#十个小时的奔袭" class="headerlink" title="十个小时的奔袭"></a>十个小时的奔袭</h3><p>用掉了一天的年假，跑回学校办理各类手续，还清图书馆书籍，归档毕业设计，领取毕业证。只能说度过了精彩纷呈的一天，值得留念。</p><p>早上起了个大早，六点半就爬将起来。一上来就状况不断，折返了两次，一次是因为忘记把登记表电子稿发到手机，一次是忘记拿六级证书。</p><p>咬了咬牙，打了车，以为能追回时间。最后在九点左右抵达了学校。</p><p>刚到学校，我一直没去想，这次是不是最后一次回到学校，走到宿舍退宿的时候，阿姨一眼就认出了我，招了招手。我拿出钥匙，填了表，一分钟就办完了退宿。她问我现居何处，我们就寒暄了几句。问我什么时候走，我说搬完东西。</p><p>然后她问了一句，不回来了？</p><p>我想我的表情一定很难看，但我笑了出来，点了点头。我想如果我够脆弱，我会索要一个拥抱，可是我没有，所以我不脆弱。</p><p>后来就跑到了待了两年的实验室，补充打印几个毕设材料，令人崩溃的事情就来了。</p><p>前一秒看微信消息还是，老师中午到四点钟都在办公室，高高兴兴跑去，从一点四十等到了两点四十，足足浪费我一个小时，心里已经骂了一万遍。言而无信，小人也。</p><p>最后去跑落户的事情，路遇倾盆大雨，还要看朋友和老师对线。</p><ul><li>老师：你仔细看我们写的这个流程。</li><li>答：这个第三步具体去哪个办公室？教务处的哪里？</li><li>老师：这个我也不知道，你过去一楼问问。</li><li>答：？？？</li></ul><p>此时我已经心态爆炸，在微信上输出。</p><p>满怀愧疚地回到宿舍，为耽误了室友的出行连连抱歉，拖到五点半，几个人才从交大打车赶往外滩。</p><h3 id="交大牛逼"><a href="#交大牛逼" class="headerlink" title="交大牛逼"></a>交大牛逼</h3><p>在车上，室友安慰了几句一天的遭遇，我那一刻在想，身边总是有许多懂得人情世故的朋友，不谦虚地说，我也算一个。我们都会在别人不愉快时，给予帮助，并不介怀一些挫折。我作为受难者，能做的只剩下迅速恢复心情。</p><p>令我最快乐的事情，是那天想见的人，都能在同一个地点相见。</p><p>沿着外滩，每走几步，就遇到一个认识的人，一起喊交大牛逼。</p><h3 id="城市感"><a href="#城市感" class="headerlink" title="城市感"></a>城市感</h3><p>我很多次说起，上海的一些地方，不在我的想象里。</p><p>外滩附近极尽繁华，是我想象中的上海。只是往西再走几步，也能遇见一些老巷子，错综复杂的窄路。那瞬间也分不清我身在何处，像异国他乡，却也像故乡。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可能是关于毕业的最后一段&quot;&gt;&lt;a href=&quot;#可能是关于毕业的最后一段&quot; class=&quot;headerlink&quot; title=&quot;可能是关于毕业的最后一段&quot;&gt;&lt;/a&gt;可能是关于毕业的最后一段&lt;/h2&gt;&lt;h3 id=&quot;十个小时的奔袭&quot;&gt;&lt;a href=&quot;#十个小时的奔</summary>
      
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Graduation" scheme="http://veiasai.github.io/tags/Graduation/"/>
    
  </entry>
  
  <entry>
    <title>关于退休的事情</title>
    <link href="http://veiasai.github.io/2020/06/28/%E5%85%B3%E4%BA%8E%E9%80%80%E4%BC%91%E7%9A%84%E4%BA%8B%E6%83%85/"/>
    <id>http://veiasai.github.io/2020/06/28/%E5%85%B3%E4%BA%8E%E9%80%80%E4%BC%91%E7%9A%84%E4%BA%8B%E6%83%85/</id>
    <published>2020-06-28T14:10:17.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>年轻人应该想着退休吗。</p><h2 id="最想做的事情"><a href="#最想做的事情" class="headerlink" title="最想做的事情"></a>最想做的事情</h2><ul><li>环游世界、豪车豪宅、看演唱会、无所事事</li><li>只是想来想去，上述一类事情，也只会在得到时快乐一阵子，很快就会有新的欲望</li><li>原谅我匮乏的想象力，擅自决定世界上最好的事情是偷走你的心</li></ul><h2 id="世纪"><a href="#世纪" class="headerlink" title="世纪"></a>世纪</h2><ul><li>2020年是可以结婚的一岁</li><li>20200202是我觉得称得上倾城之恋的一天</li><li>往后百年，都是想念</li></ul><h2 id="小朋友"><a href="#小朋友" class="headerlink" title="小朋友"></a>小朋友</h2><ul><li>我的秘密和我的坦白一样多</li><li>你决定要先听哪个</li><li>听完了他们还是一样多</li></ul><h2 id="意外"><a href="#意外" class="headerlink" title="意外"></a>意外</h2><ul><li>你有许多令人意外的缺点</li><li>令人意外是我的喜欢丝毫未减</li><li>我猜你不会喜欢我的世界</li><li>你说还给我一个意外</li></ul><h2 id="前后"><a href="#前后" class="headerlink" title="前后"></a>前后</h2><ul><li>当灯光渐暗</li><li>我本想趁机握你的手</li><li>却被你抱住整个手臂</li></ul><h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><ul><li><em>你有没有觉得热</em></li><li>还好呀</li><li><em>那手让我牵一会</em></li></ul><h2 id="终局"><a href="#终局" class="headerlink" title="终局"></a>终局</h2><ul><li>I’ve been looking for you for 20 years</li><li>now it’s time to enter next world</li><li>thank you, my love</li></ul><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><ul><li>封笔</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年轻人应该想着退休吗。&lt;/p&gt;
&lt;h2 id=&quot;最想做的事情&quot;&gt;&lt;a href=&quot;#最想做的事情&quot; class=&quot;headerlink&quot; title=&quot;最想做的事情&quot;&gt;&lt;/a&gt;最想做的事情&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;环游世界、豪车豪宅、看演唱会、无所事事&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Dream" scheme="http://veiasai.github.io/tags/Dream/"/>
    
  </entry>
  
  <entry>
    <title>fundamentals-of-option</title>
    <link href="http://veiasai.github.io/2020/06/20/fundamentals-of-option/"/>
    <id>http://veiasai.github.io/2020/06/20/fundamentals-of-option/</id>
    <published>2020-06-20T14:21:59.000Z</published>
    <updated>2023-11-06T04:04:47.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mechanics-of-Options-Markets"><a href="#Mechanics-of-Options-Markets" class="headerlink" title="Mechanics of Options Markets"></a>Mechanics of Options Markets</h2><h3 id="European-and-American-Option"><a href="#European-and-American-Option" class="headerlink" title="European and American Option"></a>European and American Option</h3><ul><li>A European option may be exercised only at the expiration date of the option, i.e. at a single pre-defined point in time.</li><li>An American option on the other hand may be exercised at any time before the expiration date.</li></ul><h3 id="Types-of-Option"><a href="#Types-of-Option" class="headerlink" title="Types of Option"></a>Types of Option</h3><ul><li>An option gives the holder of the option the right to do something. But it’s not forced.</li><li>Call: the right to buy something(underlying 标的, including stock/future/foreign currency)</li><li>Put: the right to sell.</li><li>Premium: the cost to buy an option.</li><li>expiration date, maturity date. Time limit to execution. The execution of an option is ‘exercise an option’.</li><li>exercise/strike price. The holder could buy/sell something at exercise/strike price.</li><li>It’s obvious that At expiration date:<ul><li>underlying price &gt; strike price, call option profits.</li><li>underlying price &lt; strike price, put option profits.</li></ul></li><li>Under an opposite situation, the holder doesn’t exercise the option. So the loss is Premium rather than the difference between the two prices.</li><li>Position: the number of options that a guy maintains.<ul><li>Long Position: increase the position</li><li>Short Position: decrease the position</li><li>Also represent (buy/purchase)-(sell/write) a option.</li></ul></li></ul><h3 id="Margin-Requirements"><a href="#Margin-Requirements" class="headerlink" title="Margin Requirements"></a>Margin Requirements</h3><p>The price of option is usually low, but the price of underlying may be high and fluctuate significantly. To ensure the investor could burden the fluctuation, investor must prepare extra money in his account, which is called margin. And the margin requirement is related to the position. More options you maintain, more margin you should have.</p><p>Equity style</p><ul><li>taker: no margin requirement</li><li>writer: about (underlying price * 10%)</li></ul><h3 id="Price"><a href="#Price" class="headerlink" title="Price"></a>Price</h3><ul><li>in the money = 价内 = 实值 = call strike price &lt; underlying price = put strike price &gt; underlying price = profit</li><li>at the money = 价中 = 平值 = strike price == underlying price</li><li>out of the money = 价外 = 虚值 = call strike price &gt; underlying price = put strike price &lt;&gt; underlying price = loss</li></ul><h3 id="Pricing"><a href="#Pricing" class="headerlink" title="Pricing"></a>Pricing</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><table><thead><tr><th>syntax</th><th>explanation</th></tr></thead><tbody><tr><td>$S_0$</td><td>Current stock price</td></tr><tr><td>$K$</td><td>Strike price of option</td></tr><tr><td>$T$</td><td>Time to expiration of option</td></tr><tr><td>$S_T$</td><td>Stock price on the expiration date</td></tr><tr><td>$\sigma$</td><td>Volatility of the stock price</td></tr><tr><td>$r$</td><td>Continuously compounded risk-free rate of interest for an investment maturing in time T</td></tr><tr><td>$C$</td><td>Value of American call option to buy one share</td></tr><tr><td>$P$</td><td>Value of American put option to sell one share</td></tr><tr><td>$c$</td><td>Value of European call option to buy one share</td></tr><tr><td>$p$</td><td>Value of European put option to sell one share.</td></tr></tbody></table><p>The effects.</p><table><thead><tr><th>Variable</th><th>C</th><th>P</th><th>c</th><th>p</th></tr></thead><tbody><tr><td>$S_0$</td><td>+</td><td>-</td><td>+</td><td>-</td></tr><tr><td>$K$</td><td>-</td><td>+</td><td>-</td><td>+</td></tr><tr><td>$T$</td><td>+</td><td>+</td><td>?</td><td>?</td></tr><tr><td>$\sigma$</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>$r$</td><td>+</td><td>-</td><td>+</td><td>-</td></tr></tbody></table><h4 id="Continuously-Compounded-Interest"><a href="#Continuously-Compounded-Interest" class="headerlink" title="Continuously Compounded Interest"></a>Continuously Compounded Interest</h4><p>$$\lim_{n \to +\infty} (1 + \frac{r}{n})^n = e^{r}$$</p><h4 id="Bounds"><a href="#Bounds" class="headerlink" title="Bounds"></a>Bounds</h4><ul><li>$c \leq S_0 \quad and \quad C \leq S_0$<ul><li>long a stock and short a option results in risk-free profit.</li></ul></li><li>$c \geq S_0-Ke^{-rT}$ | short a stock and long a option.<ul><li>Then hold cash and get interest. if stock price increases, call option will profit. Otherwise, don’t exercise the option and buy a stock in market.</li></ul></li><li>$p \geq max(Ke^{-rT}-S_0, 0)$<ul><li>negative put makes no sense.</li></ul></li><li>$S_0-K \leq C-P \leq S_0-Ke^{-rT}$</li></ul><h4 id="Call-Put-Parity"><a href="#Call-Put-Parity" class="headerlink" title="Call-Put Parity"></a>Call-Put Parity</h4><ul><li>Portfolio A: one European call option plus a zero-coupon bond that provides a payoff of K at time T.</li><li>Portfolio C : one European put option plus one share of the stock.</li><li>At expiry time T, A is equal to C.<ul><li>$S_T&gt;K$:<ul><li>A: $S_T-K+K=S_T$</li><li>C: $0+S_T=S_T$</li></ul></li><li>$S_T&lt;K$:<ul><li>A: $0+K=K$</li><li>C: $K-S_T+S_T=K$</li></ul></li></ul></li><li>So the current cost should be equal.</li><li>$c+Ke^{-rT}=S_0+p$</li></ul><h3 id="Trading-Strategies-Involving-Options"><a href="#Trading-Strategies-Involving-Options" class="headerlink" title="Trading Strategies Involving Options"></a>Trading Strategies Involving Options</h3><h4 id="Principal-Protected"><a href="#Principal-Protected" class="headerlink" title="Principal-Protected"></a>Principal-Protected</h4><p>One option + One Underlying.</p><h4 id="Spread"><a href="#Spread" class="headerlink" title="Spread"></a>Spread</h4><p>A spread trading strategy involves taking a position in two or more options of the same<br>type.</p><h5 id="Bull-Spread"><a href="#Bull-Spread" class="headerlink" title="Bull Spread"></a>Bull Spread</h5><p>buying a European call option on a stock with $K_1$ and selling a European call option with a $K_2$. The original cost is $C_d$. It should be negative because out of money option has lower price.</p><ul><li>$K_1&lt;K_2$<ul><li>$S_0&lt;K_1 =&gt; -C_d$</li><li>$K_1&lt;S_0&lt;K_2 =&gt; S_0 - K_1 - C_d$</li><li>$S_0&gt;K_2 =&gt; K_2 - K_1 - C_d$</li></ul></li></ul><p>Three types of bull spread can be distinguished:</p><ol><li>Both calls are initially out of the money.</li><li>One call is initially in the money; the other call is initially out of the money.</li><li>Both calls are initially in the money</li></ol><h5 id="Bear-Spread"><a href="#Bear-Spread" class="headerlink" title="Bear Spread"></a>Bear Spread</h5><p>buying a European put with $K_2$ and selling a European put with $K_1$. And The original cost is $P_d$.</p><ul><li>$K_1&lt;K_2$<ul><li>$S_0&lt;K_1 =&gt; K_2 - K_1 - P_d$</li><li>$K_1&lt;S_0&lt;K_2 =&gt; K_2 - S_0 - P_d$</li><li>$S_0&gt;K_2 =&gt; -P_d$</li></ul></li></ul><h5 id="Box-Spread"><a href="#Box-Spread" class="headerlink" title="Box Spread"></a>Box Spread</h5><p>a bull call spread with strike prices K1 and K2 and a bear put spread with the same two strike prices.</p><ul><li>$K_1&lt;K_2$<ul><li>$S_0&lt;K_1 =&gt; K_2 - K_1 - P_d - C_d$</li><li>$K_1&lt;S_0&lt;K_2 =&gt;  K_2 - K_1 - P_d - C_d$</li><li>$S_0&gt;K_2 =&gt;  K_2 - K_1 - P_d - C_d$</li></ul></li></ul><h5 id="Butterfly-Spread"><a href="#Butterfly-Spread" class="headerlink" title="Butterfly Spread"></a>Butterfly Spread</h5><p>involves positions in options with three different strike prices.</p><h5 id="Calendar-Spreads"><a href="#Calendar-Spreads" class="headerlink" title="Calendar Spreads"></a>Calendar Spreads</h5><p>have the same strike price and different expiration dates.</p><h5 id="Diagonal-Spreads"><a href="#Diagonal-Spreads" class="headerlink" title="Diagonal Spreads"></a>Diagonal Spreads</h5><p>both the expiration date and the strike price of the calls are different.</p><h4 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h4><h3 id="Binomial-Tree"><a href="#Binomial-Tree" class="headerlink" title="Binomial Tree"></a>Binomial Tree</h3><h4 id="Generalization"><a href="#Generalization" class="headerlink" title="Generalization"></a>Generalization</h4><p>Follow a straightforward formula(or assumption):</p><p>$S_u<em>p+S_d</em>(1-p)=S_0*e^{rT}$</p><p>Left is the expected value of stock price.</p><p>Right is risk-free profit.</p><p>They should be equal, if not, there is an arbitrage chance.</p><p>Some equivalent formats:</p><ul><li>$u<em>S_0<em>p+d</em>S_0</em>(1-p)=S_0*e^{rT}$</li><li>$u<em>p+d-d</em>p=e^rT$</li><li>$p = \frac{e^{rT}-d}{u-d}$</li></ul><h4 id="Delta"><a href="#Delta" class="headerlink" title="Delta"></a>Delta</h4><p>The delta ($\Delta$) of a stock option is the ratio of the change in the price of the stock<br>option to the change in the price of the underlying stock.</p><h4 id="Determining-u-and-d"><a href="#Determining-u-and-d" class="headerlink" title="Determining u and d"></a>Determining u and d</h4><ul><li>$u = e^{\sigma\sqrt{T}}$</li><li>$d = \frac{1}{u}$</li><li>$\sigma$ is the volatility.</li></ul><h3 id="Black-Scholes-Merton-Model"><a href="#Black-Scholes-Merton-Model" class="headerlink" title="Black-Scholes-Merton Model"></a>Black-Scholes-Merton Model</h3><h4 id="Assumptions-about-How-stock-price-evolves"><a href="#Assumptions-about-How-stock-price-evolves" class="headerlink" title="Assumptions about How stock price evolves"></a>Assumptions about How stock price evolves</h4><ul><li>$\mu$ : Expected Return on Stock</li><li>$\sigma$ : Volatility of the stock price</li><li>$\frac{\Delta S}{S}\sim\phi(\mu\Delta t, \sigma^2\Delta t)$ (normal distribution)</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Fundamentals_of_Options_and_Futures_Markets（8th_Edition）John Hull</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mechanics-of-Options-Markets&quot;&gt;&lt;a href=&quot;#Mechanics-of-Options-Markets&quot; class=&quot;headerlink&quot; title=&quot;Mechanics of Options Markets&quot;&gt;&lt;/a&gt;Me</summary>
      
    
    
    
    <category term="Finance" scheme="http://veiasai.github.io/categories/Finance/"/>
    
    
    <category term="option" scheme="http://veiasai.github.io/tags/option/"/>
    
  </entry>
  
  <entry>
    <title>the-design-and-evolution-of-cpp</title>
    <link href="http://veiasai.github.io/2020/06/13/the-design-and-evolution-of-cpp/"/>
    <id>http://veiasai.github.io/2020/06/13/the-design-and-evolution-of-cpp/</id>
    <published>2020-06-13T17:50:25.000Z</published>
    <updated>2023-11-06T04:04:47.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-with-class"><a href="#C-with-class" class="headerlink" title="C with class"></a>C with class</h2><p>Class is a type</p><ul><li>Compile-time access control</li><li>static type checking</li><li>function definition under class, make a class more like an interface specification.</li><li>new/delete</li></ul><h2 id="C-Language-Design-Rules"><a href="#C-Language-Design-Rules" class="headerlink" title="C++ Language Design Rules"></a>C++ Language Design Rules</h2><p>Aims</p><ul><li>C++ makes programming more enjoyable for serious programmers</li><li>C++ is a general-purpose programming language that<ul><li>is a better C</li><li>supports data abstraction</li><li>supports object-oriented programming</li></ul></li></ul><p>General Rules</p><ul><li>C++’s evolution must be driven by real problems</li><li>Don’t get involved in a sterile quest for perfection</li><li>C++ must be useful now</li><li>Every feature must have a reasonably obvious implementation</li><li>Always provide a transition path</li><li>C++ is a language, not a complete system</li><li>Provide comprehensive support for each supported style</li><li>Don’t try to force people</li></ul><p>Design Support Rules</p><ul><li>Support sound design notions</li><li>Provider facilities for program organization</li><li>Say what you mean</li><li>All features must be affordable</li><li>It is more important to allow a useful feature than to prevent every misuse</li><li>Support composition of software from separately developed parts</li></ul><p>Language-Technical Rules</p><ul><li>No implicit violations of the static type system</li><li>Provide as good support for user-defined types as for built-in types</li><li>Locality is good</li><li>Avoid order dependencies</li><li>If in doubt, pick the variant of a feature that is easiest to teach</li><li>Syntax matters(often in perverse ways)</li><li>Preprocessor usage should be eliminated</li></ul><p>Low-Level Programming Support Rules</p><ul><li>Use traditional(dumb) linkers</li><li>No gratuitous incompatibilities with C</li><li>Leave no room for a lower-level language below C++(except assembler)</li><li>What you don’t use, you don’t pay for(zero-overhead rule)</li><li>If in doubt, provide means for manual control</li></ul><h2 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h2><p>对于一个被广泛使用的语言，一个统一标准是必须的，简单来说，标准定义了什么是general的，什么是implementation-dependent。</p><p>标准委员会的组成非常复杂，有各种职业者，各个公司代表。</p><p>委员会的很多工作，不为大多数人所知，而且非常无聊。感觉与程序员的修养相悖，那些花了很多时间探究和定义的写法问题，恰恰是程序员不关心的，我们更多地关注最佳实践，而不是令人目眩的奇怪语法。</p><p>Examples</p><ul><li>Name look up - Namespace - Redefinition</li><li>Lifetime of temporaries - EOS</li><li>Keyword argument</li><li>Restricted pointer</li><li>Character sets</li></ul><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><h3 id="Design-Tradeoffs"><a href="#Design-Tradeoffs" class="headerlink" title="Design Tradeoffs"></a>Design Tradeoffs</h3><ul><li>Emphasize run-time efficiency?</li><li>Minimize recompilation after a change?</li><li>Maximize portability across platforms?</li><li>Enable users to extend the basic library?</li><li>Allow user without source code available?</li><li>Blend in with existing notations and styles?</li><li>Be usable from code not written in C++?</li><li>Be usable by novices?</li></ul><h2 id="Major-Extensions"><a href="#Major-Extensions" class="headerlink" title="Major Extensions"></a>Major Extensions</h2><h3 id="Run-Time-Type-information"><a href="#Run-Time-Type-information" class="headerlink" title="Run-Time Type information"></a>Run-Time Type information</h3><ul><li>dynamic_cast<ul><li>It has a static check: the two objects must have derivation relation.</li><li>It doesn’t require the target type is exactly what the obj is. The target type can be a parent class.</li></ul></li><li>typeid()<ul><li>You should try to avoid typeid() in a switch statement. In most cases, virtual function is more scalable.</li></ul></li></ul><h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><h3 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h3><h3 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-with-class&quot;&gt;&lt;a href=&quot;#C-with-class&quot; class=&quot;headerlink&quot; title=&quot;C with class&quot;&gt;&lt;/a&gt;C with class&lt;/h2&gt;&lt;p&gt;Class is a type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="C++" scheme="http://veiasai.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>api管理工具yapi</title>
    <link href="http://veiasai.github.io/2020/04/07/api%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7yapi/"/>
    <id>http://veiasai.github.io/2020/04/07/api%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7yapi/</id>
    <published>2020-04-07T17:50:25.000Z</published>
    <updated>2023-11-06T04:04:47.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>在写js的时候，经常为某些结构量没有类型而感到痛苦，访问属性必须查阅另外的手册，在typescript出来以后，可以为某些常用的结构定义类型暗示，在使用时就有类型检查和自动补全了。</p><p>于是，前后端交互的接口，是不是也应该有某种工具，自动生成ts版本的接口呢？让js开发能够直接传入具有类型的参数，返回值也有对应的类型，restful的api会变得非常简单，js调用后端接口等同于调用生成出来的函数。而且，在生成函数这里，还可以实现切面编程，做一些mock、filter的工作。</p><p>最后，我找到了yapi、rap这样的工具，不过在考察的时候，意识到grpc也可能是不错的选择。</p><h2 id="Yapi"><a href="#Yapi" class="headerlink" title="Yapi"></a>Yapi</h2><p>首先，java开发后端时，使用<a href="https://github.com/diwand/YapiIdeaUploadPlugin" target="_blank" rel="noopener">idea插件</a>，可以将controller定义的接口，推送至yapi。插件还支持一些注解，提供mock、注释等功能。</p><p>前端可以用<a href="https://github.com/fjc0k/yapi-to-typescript" target="_blank" rel="noopener">yapi-to-ts</a>生成ts代码。</p><p>java插件用起来没什么大问题，推送很方便。</p><p>web插件有些许的问题，作者保留了一些接口，让用户来填写实现，比如最终生成的请求方式，是需要自己实现的。</p><p>我实现了一个用fetch请求后端的版本，同时还支持路径参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baseUrl = options.server === <span class="string">'mock'</span></span><br><span class="line">      ? payload.mockUrl</span><br><span class="line">      : options.server === <span class="string">'dev'</span></span><br><span class="line">        ? payload.devUrl</span><br><span class="line">        : payload.prodUrl</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span><span class="subst">$&#123;payload.path&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (payload.paramNames.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 路径参数</span></span><br><span class="line">      <span class="keyword">const</span> pathParas: string[] = []</span><br><span class="line">      url = url.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\&#123;(\\w*)\\&#125;'</span>), (s, paraName) =&gt; &#123; pathParas.push(paraName); <span class="keyword">return</span> payload.data[paraName] &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// url paras</span></span><br><span class="line">      <span class="keyword">const</span> urlParas = payload.paramNames.filter(<span class="function">(<span class="params">value</span>) =&gt;</span> pathParas.includes(value))</span><br><span class="line">      url = url + <span class="string">'?'</span></span><br><span class="line">      urlParas.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        url = url + value + <span class="string">'='</span> + payload.data[value] + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> bodyParas: string[] = <span class="built_in">Object</span>.keys(payload.data).filter(<span class="function">(<span class="params">value: string</span>) =&gt;</span> !payload.paramNames.includes(value))</span><br><span class="line">    <span class="keyword">let</span> req</span><br><span class="line">    <span class="comment">// 具体请求逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (payload.requestBodyType === RequestBodyType.form) &#123;</span><br><span class="line">      <span class="keyword">const</span> formdata = <span class="keyword">new</span> FormData()</span><br><span class="line">      bodyParas.forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        formdata.append(value, payload.data[value])</span><br><span class="line">      &#125;)</span><br><span class="line">      req = fetch(url, &#123; <span class="attr">method</span>: payload.method, <span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;, <span class="attr">body</span>: formdata &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (payload.requestBodyType === RequestBodyType.json) &#123;</span><br><span class="line">      req = fetch(url, &#123; <span class="attr">method</span>: payload.method, <span class="attr">headers</span>: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> &#125;, <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(payload.data, bodyParas) &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      req = fetch(url, &#123; <span class="attr">method</span>: payload.method &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (payload.responseBodyType === ResponseBodyType.json) &#123;</span><br><span class="line">        response.json().then(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(body)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          reject(res)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.text().then(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// eslint-disable-next-line</span></span><br><span class="line">          resolve(body <span class="keyword">as</span> any)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          reject(res)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      reject(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>生成函数的名字，要符合js的规范，所以也稍作调整，把一些非法字符去掉。</p><p>idea插件推送的类型名称和yapi默认名称不对应，导致前端插件无法正常识别，做一个预处理转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Config, ExtendedInterface, ChangeCase, Interface &#125; <span class="keyword">from</span> <span class="string">'yapi-to-typescript'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config: Config = [</span><br><span class="line">  &#123;</span><br><span class="line">    serverUrl: <span class="string">'http://'</span>,</span><br><span class="line">    typesOnly: <span class="literal">false</span>,</span><br><span class="line">    reactHooks: &#123;</span><br><span class="line">      enabled: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    prodEnvName: <span class="string">'production'</span>,</span><br><span class="line">    devEnvName: <span class="string">'dev'</span>,</span><br><span class="line">    outputFilePath: <span class="string">'src/api/index.ts'</span>,</span><br><span class="line">    requestFunctionFilePath: <span class="string">'src/api/request.ts'</span>,</span><br><span class="line">    dataKey: <span class="string">''</span>,</span><br><span class="line">    projects: [</span><br><span class="line">      &#123;</span><br><span class="line">        token: process.env.YTT_TOKEN <span class="keyword">as</span> string,</span><br><span class="line">        getRequestFunctionName: (interfaceInfo: ExtendedInterface, <span class="attr">changeCase</span>: ChangeCase): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> interfaceInfo.path.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[\\+\\/\\&#123;\\&#125;]"</span>,<span class="string">"g"</span>), <span class="string">''</span>) + interfaceInfo.method</span><br><span class="line">        &#125;,</span><br><span class="line">        preproccessInterface: <span class="function"><span class="params">interfaceInfo</span> =&gt;</span> &#123;</span><br><span class="line">          interfaceInfo.res_body = interfaceInfo.res_body.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'"(String|int|long|Interger)"'</span>, <span class="string">'g'</span>), (s, s1) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1 === <span class="string">'String'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">'"string"'</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s1 === <span class="string">'int'</span> || s1 === <span class="string">'long'</span> || s1 === <span class="string">'Interger'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="string">'"integer"'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">if</span> (interfaceInfo.req_body_other !== <span class="literal">undefined</span>)</span><br><span class="line">            interfaceInfo.req_body_other = interfaceInfo.req_body_other.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'"(String|int|long|Interger)"'</span>, <span class="string">'g'</span>), (s, s1) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (s1 === <span class="string">'String'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'"string"'</span></span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s1 === <span class="string">'int'</span> || s1 === <span class="string">'long'</span> || s1 === <span class="string">'Interger'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'"integer"'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          <span class="keyword">return</span> interfaceInfo</span><br><span class="line">        &#125;,</span><br><span class="line">        categories: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: <span class="number">0</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;在写js的时候，经常为某些结构量没有类型而感到痛苦，访问属性必须查阅另外的手</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>我的大学</title>
    <link href="http://veiasai.github.io/2020/04/04/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    <id>http://veiasai.github.io/2020/04/04/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</id>
    <published>2020-04-04T14:58:53.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="既是完结，也是序章"><a href="#既是完结，也是序章" class="headerlink" title="既是完结，也是序章"></a>既是完结，也是序章</h2><h3 id="海阔凭鱼跃"><a href="#海阔凭鱼跃" class="headerlink" title="海阔凭鱼跃"></a>海阔凭鱼跃</h3><p>在去年七月，作为开发实习生工作了两个月，体会了离开学校的感觉。我被前所未有的孤独袭击，切实感受到，书里说的，上海看不到天，抬头就是两道矗立的高楼，一直延伸。</p><p>我那时候脑子里在想，这世界车水马龙，与我无关。在窄小的租房里躺下来，想象着从天上看我的样子，先是一张床，一个人，然后镜头慢慢拔高，看到这栋楼，这个街道，这座城市。甚至看到这颗星球，这个宇宙。半梦半醒之间，我听不到任何这世界的喧嚣，没有任何联系。这就是我感受的孤独，我开始思考为什么离开学校才有这种感觉。</p><p>我那个时候没有意识到，其实一直以来，都是这样，都在被孤独侵袭。只不过，求学的时候，不管我是冷是热，总有那么多同学陪伴身边，很难失去什么。那些表面的、被迫的热闹，无形中解去了这种孤独。我来自一座小城，只靠走路就能到任何一个同学的家。我习惯这种被羁绊包围的感觉，二十年。</p><p>现在，什么都没有了。如果想念一个人，一定要说出来，要有时常的联系。我很讨厌这种多少带一点计算的社交关系，我的时间不再足够浪费，每一次娱乐都必须把各位放上天平，细细衡量。坦白说，我不喜欢忙碌于社交，我也不会习惯，但我被那种感受束缚，导致我倍感孤独。</p><p>于是，没过几天，我就清醒了过来。</p><p>没事，都一样。</p><p>不管是过去还是现在，情况没有更好也没有更坏。就像一个习惯了的东西突然没了，暂时地不适应，但细想想，那些乱乱的热闹，没有什么用。</p><p>真遗憾，没有什么用。</p><h3 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h3><p>高中毕业，确是我的一次人生巅峰。</p><p>小白说我是有勇有谋，胆敢在高考志愿上填不调剂，也不怕掉档。我没想那么多，只是觉得，如果要我去学生物、化学一类的，我会疯掉吧，更何况，只是提前批而已，掉了也无关痛痒。</p><p>那时被交大的提前批提档，因为够不到工科试验班，我又拒绝调剂到生环平台，他们就把我的档案还了回来。到了本科一批，因为是在县里读的三年高中，得到贫困计划的照顾，我被直接录取到交大电院。</p><p>我只知道电院里有计算机，丝毫不清楚这一次阴差阳错，对我的人生有多大影响。</p><p>提前批的专业都是大平台，这种大平台招生在后面几年愈演愈烈，参与的专业越来越多。招进来之后，高考分数会占很大比重，比如80%，还有一部分根据大学里的一次考试决定。最后，按照这个综合排名，各位再选一次专业，然而大平台里有二十多个专业，总也有许多不如意的人，选到自己不喜欢的专业。我不太清楚各个专业的具体情况，但电院确实是近年的热门，需要相当高的位次才能进入电院。</p><p>因此，以我当初被退档的经历来推算，我的成绩应当是垫底部分。如果我被大平台录取，十有八九是不会进入电院了，往后余生，尚未可知。</p><p>那一年，电院直接招收的学生，在分专业时，高考分数只占比50%，还有50%考一次关于编程的试。我没有什么编程经验，唯一有点关系的，是在魔兽争霸的地图编辑器里，制作游戏地图，我后来明白那就是在编程，只不过我是ui去套的，没有直接写代码。侥幸的是，我学的还可以，考试分数也相当不错。最后综合排名，还在中上水平。</p><p>最终，我进入了软件学院。</p><h3 id="寄宿生活"><a href="#寄宿生活" class="headerlink" title="寄宿生活"></a>寄宿生活</h3><p>这可能是我第一次住在学校里，如果不算幼儿园时期，中午在学校里睡觉的话。</p><p>我没有遇到什么刁钻的室友，也没有奇怪的寝室氛围。我们这个宿舍，完整坚持到了毕业。这并不容易，真的。就在隔壁就有因为各种原因，暂缓学业，从这栋楼搬走的同学。有趣的是，我的三个室友，全都顺利读了本校的研究生，途径还各不相同，实是奇闻。</p><p>如果我没有记错，我的生日应该是大学后第一个到的。我们几个室友一起出去吃饭，自那以后，每个室友生日都要一起吃饭。几年来，学校周边的店大都吃过了。</p><p>我大学的一个遗憾，没有找到女友。幸好看室友们恋爱，也是弥补空白。老实说，这样近地感受一个人恋爱时的状态，让我经常陷入困惑。</p><p>我不敢问，但我想的是，“就这还不分手吗？”。</p><p>我没有劝分的意思，也不是嘲讽，我一方面是看不懂，另一方面是羡慕。</p><p>我觉得，人的缺点这么多，要有多喜欢，才能坚持下去。我们时而偏执、时而幼稚，时而奔放、时而颓唐。我没有一直勤勤恳恳，也没有一直快快乐乐，我也会给你带来烦恼和麻烦。即使这样，还要和我在一起吗。</p><p>后来我就把目标改成了，寻找一个想和我一起探讨这个问题的朋友，任务期限是一辈子。</p><h3 id="编程大师的鸡汤"><a href="#编程大师的鸡汤" class="headerlink" title="编程大师的鸡汤"></a>编程大师的鸡汤</h3><p>在我大学初期，低迷的日子里，我沉浸在图书馆二楼的文学阅览室里许久。</p><p>我知道，那么多的书，我看不完，但我真享受被这么一屋子的书，包围的感觉。那时候我看得最多的是推理小说，主要就是岛田庄司、绫辻行人、东野圭吾等。侦探们沉着冷静、身手敏捷、头脑灵活的样子，让人十分沉迷。</p><p>九把刀的小说我也读了好几本。《爱情，两好三坏》恰好击中了我那时的心境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">几乎，我们无法规定真命天子在第一时间出现。</span><br><span class="line">几乎，我们也没有办法强制喜欢的人也得喜欢自己。</span><br></pre></td></tr></table></figure><p>在阅读文学作品的同时，我也顺带着找一些编程相关的书籍，充分发挥这巨大图书馆的作用。也就是那时，受到了蛊惑。诸如《软件开发者路线图》、《程序员修炼之道-从小工到专家》、《编程之魂》、《黑客与画家》一类的书，让我觉得，编程大师，真酷。从此踏上了一条不归路，梦想成为最厉害的编程手。</p><p>在我学习的这几年里，我见到的东西越来越多，这些执念也变得没有那么深了。什么大师，还没有一套房来得安逸。口号只适合喊一喊，也不能当饭吃。而且，我渐渐发现，编程很多时候，都不只是编程，搞清楚在做什么，以及源动力在哪里，是更重要的事情。</p><p>只是，在我真正陷入编程那一刻：世界是复杂的，编程是简洁的。</p><p>我非圣人，没能时刻高洁。</p><p>但写代码时的我，内有激情，外有光辉。</p><h3 id="电竞少年梦"><a href="#电竞少年梦" class="headerlink" title="电竞少年梦"></a>电竞少年梦</h3><p>我有几个从小学就认识的网友，我们在一个qq群里相遇。时至今日，我们仍然会聚在一起玩游戏。我从不觉得腻，游戏嘛，玩一辈子都行。</p><p>我始终记得小时候玩跑跑卡丁车、梦幻西游、冒险岛的时光。和很多人对这几个游戏的记忆不同，我那时候很穷，就是字面意义上的穷，没有多的零花钱。所以我从来没有往游戏里充过钱。</p><p>因为不能充值，我对梦幻西游的概念，很长一段都停滞在十级之前，超过了十级，就要按时间收费，点卡不足账号就没法登录。尽管如此，我对十级前的剧情仍然乐此不疲，一帮小伙伴们甚至想着，如果永远不关机，是不是就可以一直欠费地玩下去。</p><p>那时候正是冒险岛的鼎盛时期，游戏职业也只有四个。我纯粹是因为觉得弓箭手很帅，才选择了这一职业，巧合的是，射手村那块训练场，可能是所有玩家都忘不掉的记忆。</p><p>我那时不懂什么叫做攻略，也不明白什么是外挂。学习技能全看哪个技能好看，也不担心技能点不够。一整个暑假刷上几十次的组队任务，凑一身破烂似的装备。</p><p>后来的事情，也不用详说，各有各的曲折，我们就这样，离开了那片热土。</p><p>在大学里，玩守望先锋、绝地求生的时候，我才恍然悟到，时光是残酷的，连电子游戏也不能幸免。即使它们可以永远刻在某块硬盘上，即使还能用技术还原曾经的服务器，我也无法触及哪怕丝毫的过往。</p><p>不只是游戏，那些小说、动漫、玩具，都会一一远去。大人们看到金庸的书被拍成电视剧，和我今天，看到《全职高手》、《斗罗大陆》、《斗破苍穹》、《庆余年》，是完全一样的逻辑。</p><p>这就是我从游戏里学到的道理：轮回之中，得见永生。</p><h3 id="为中华之崛起而读书"><a href="#为中华之崛起而读书" class="headerlink" title="为中华之崛起而读书"></a>为中华之崛起而读书</h3><p>不要误会，我不像是会把，这么掷地有声的话，说出来的人。</p><p>但我曾经是， 我无数次想象，老师让我站起来回答，为了什么而读书。然后我大声告诉他，为中华之崛起而读书。</p><p>在我敢于说这句话的时候，周围没人相信。等到了周围人都把我的一言一行放大来的时候，我已经不敢说这句话了。</p><p>在学校里，我们都忙于找实习、找科研项目，想要升到好的学校，想要进入到优秀的企业。我觉得这就是环境带给我的错觉，我们都会被环境同化，当然这并不是坏事，适应环境是本能，但是，第一名总是只有一个，一个环境里的人越多，压力就越大。</p><p>我看到许多，说自己身在名校，却越过越忧虑、自卑的人。我知道这也是事实，同侪压力在名校里格外严重，正所谓天外有天，人外有人。</p><p>我必须说明，也可能是因为我太菜了，直接躺平了，不想努力了，所以才能一脸无所谓地说，都没关系。努力是好事，但我不希望努力的同时又很难过，如果你一定要保持难过，可以不用听我废话。</p><p>接下来我再细说我的观点。</p><p>第一，做不到就不做。我总觉得，有许多话，我们从小学到大，等到了自己身上，却总是忘了运用。我说扬长避短你信，说攻其不备你也信，但就是不肯相信，自己是有短处的。既然总是玩不赢，我不玩了还不行吗？不再去想排名如何，想学就学，关注点滴的成长。水滴石穿你信，让你每天看自己的进步你又看不见了。</p><p>第二，为了快乐而读书。其实倒不如说，我所有的一切都是为了快乐，甚至不只是短暂的快乐，也包括长远利益，这也是为什么能够在偶尔枯燥的学习中坚持下来。我始终相信，读万卷书，行万里路，是教我怎么快乐的，所以，每当有人说，学了越多越不快乐的时候，我以为问题都是在自己身上，自己误解了读书的意义。</p><p>第三，百折不挠。这是最重要的一点。<br>我们总是梦想成为英雄，如果说英雄都是不屈不挠的，你肯定认可，这种故事听了太多了。到了自己身上，一点小挫折就已经倒下，却自命不凡要做英雄。我这样说，一方面是劝诫从磨炼自身开始努力，一方面是，没那个气魄就别想做英雄了，不想着做英雄，也就不会那么多不快乐。</p><p>我以为前两点多少是带有偏见的，因为真的也有人，怎么学也学不会，真的也有人，做不到就是绝境，退无可退。我的经历让我对此无法感同身受，但我深表理解。那种时候，我只能说，在那以前，要多想。处在那个境界的灵魂，只能自我拯救。</p><p>别忘了，百折不挠。</p><h3 id="逃课的气节"><a href="#逃课的气节" class="headerlink" title="逃课的气节"></a>逃课的气节</h3><p>忘了叫什么名字，说是高中毕业生必读的一本书，那时候不懂什么是鸡汤，就感觉书里道理很多，现在看也有不少毒鸡汤。书里说，讲得不好的课就应该逃掉，如果隔壁学校有名师名课，也应该跑去听。</p><p>我是真的佩服那种形式的努力：跑到其他学校听课，做志愿者，各种社团赶报告。这些事情都充斥着酷味道，大概就是值得发朋友圈的那种酷。不过，搞那些花哨操作，和学习没什么两样，有人搞得好，就有人搞得不好。学习不会让每一个人都如意，那些花哨操作也是一样，从来就不缺少负面消息。</p><p>我开始是个初学者，跟着后面看热闹，后来也是运气不好，没有继续下去。</p><p>回到正题，因为听信了”谗言”，我对一些不想听的课，都是能翘就翘，对带个电脑去，坐在教室里做其他事情，这种认真应付的手段更是特别看不起，因为它就像是屈服了一样。而且，应付就应付，认真就认真，在那里认真地应付，实在是没有气节。</p><p>还有像让人帮忙点到，又要欠人情，又显得奇怪，你不想听不去，你让去的人帮忙签到，这是看不起谁呢。我一向愿赌服输，翘就翘了，没抓到是我运气好，抓到我也认栽，大多数时候都懒得想办法签到。</p><p>现在想想，真傻，一点也不圆滑，只是我翘课次数也并不多，不管怎么操作，影响都不是很大。</p><p>为了避免这种两难境地，还是别翘课了，且听他废话吧。</p><h3 id="扛不住变迁的食堂"><a href="#扛不住变迁的食堂" class="headerlink" title="扛不住变迁的食堂"></a>扛不住变迁的食堂</h3><p>我很早就明白了，事物一成不变是种错觉。</p><p>我只是没有用心观察周遭事物的变化，才没有意识到，小城也会不停变化。但说起来，外婆家就不怎么变化，二十多年也是一个样子。似乎城市化越高的地方，样貌变化就越快。</p><p>让我难受的，并不是变化本身，而是两种截然不同的环境，带给我们的认知差异。</p><p>我刚到学校时，就有前辈说华联是什么样子，但我到的时候，那一块地方的商家全都清空了，不出校园就能吃烧烤的经历我是一点都没有。还没等到重新开业，没等到那些记忆让我也能共享一下，全新版本的华联就来了，还换了个名字，叫玉兰苑，有了全新的记忆，鸡蛋灌饼、麻辣香锅、奶茶。</p><p>再到后来，第二餐厅一楼也全部撤换。因为宿舍在西区，我前两年都没怎么吃过那个地方，直到第三年专业课的教室都在东区，才经常吃二餐的。我刚爽了几顿那个干挑面，整个又给换了，而且刚好在新学年的时候开业，新生们可能都不知道这是大装修了。如今都是些价格颇为昂贵的品牌连锁店，质量看起来是有保障了，可惜费钱。</p><p>这又是一次轮回，只是我的角色变换了。</p><h3 id="面壁人"><a href="#面壁人" class="headerlink" title="面壁人"></a>面壁人</h3><p>在公司上班，和人交流的时候，脑海里跳出了一句话。</p><p>“我怎么知道您是不是正在工作呢，面壁者”</p><p>我看不出同事们，是因为工作而不厌其烦地和我交流，还是说我的问题确实还可以，没有让他们厌烦。</p><p>尤其是经常要和人交流的HR这类职业，越是厉害的HR，越是浑然一体，工作就像是本能，让人丝毫无法察觉，是不是已经被下了评分。</p><p>在我初中高中的时候，我会反应过来，小学里的某件事情，来龙去脉是怎样的，我当初做错了什么，误会了什么。</p><p>等我到了大学，我意识到我初中高中又做错了什么了。之后，这类反应变得越来越快，不再需要几年的时间去反省，因为很多错误是类似的。</p><p>只需要几天，或者是另外一件事情的触发，就想通某些事情是怎么发生的。</p><p>可是，破壁真是件累人的事情。</p><h3 id="不存在的问题"><a href="#不存在的问题" class="headerlink" title="不存在的问题"></a>不存在的问题</h3><p>我第一次参加社团面试，时间是在晚上，去了约定的某一间教室。我还是头一次到那栋楼，连路都找不到，而且教室的灯都熄灭了。</p><p>几经波折，看到了学长学姐，得知预约的教室没有按时打开，我们又换到另外一间。那时我在心中腹诽，这办事也太不靠谱。</p><p>学姐问了我好些问题，有一个题我始终记得：</p><p>“如果社团的事情和你自己的安排冲突了，比如学业什么的，你会怎么做？”</p><p>我下意识地就说，怎么会呢？</p><p>为什么社团的事情会和安排冲突呢，本来不就应该避开吗？要是我没时间，我就不参加社团了。</p><p>学姐只说你别管，你就假设有这个问题怎么办。</p><p>我笑了笑，没说出任何话来。</p><p>后来发现世上有太多，类似的问题。从来就不会派上用场，还非得问，美其名曰看你的反应能力。我觉得都是电影看多了，鸡汤喝多了，以为那些小技巧能攫取成功。</p><h3 id="软件学院"><a href="#软件学院" class="headerlink" title="软件学院"></a>软件学院</h3><p>软件学院有独立的大楼，以前是作为独立院系存在的，现在算是电院下属，院中院。那些楼呈环状，几乎所有的部分都是联结起来的，却还划分了一到五号楼，初时让人好生费解。</p><p>一开始的记忆是二号楼，其实就是指那一间演播厅，大概能坐下几百人。入学欢迎仪式，后来的分专业说明，毕设安排都在这里进行。</p><p>我终于见到那个在中文版CSAPP上写序的男人，我们的院长。我觉得他颇为张扬，又有真知灼见，并且从不吝于分享。</p><p>第二次的记忆是三号楼，主要是三号一楼的两间教室。我们在这里上习题课，进行上机考试。最为难忘的是，大二一整个小学期都关在那个教室里写项目。</p><p>我那时没什么感觉，现在才了解，那一段经历是很难得的。和几个人朝夕相处一个月，深厚友谊是很自然的事情。</p><p>第三次的记忆是五号楼。五号楼是好几个实验室在的地方，我最早的班主任，一个研究生学长，就在五号楼这边。我那时觉得，那些一格一格的工作空间，看起来好酷。能够有个舒服的屏幕，放上喜欢的键盘，旁边再摆一排技术书籍，氛围就有了。</p><p>第四次，我嘻嘻哈哈地拍完了合影，记忆就变成了记忆。</p><h3 id="我向往的超级涵养"><a href="#我向往的超级涵养" class="headerlink" title="我向往的超级涵养"></a>我向往的超级涵养</h3><p>我遇到很多很多的人，但我最留恋和羡慕的，是那种花钱不计较，待人接物特别礼貌，一看就有个好家庭的人。我甚至在猜想，是不是被保护得太好了，让他以为这个世界如此美妙。而且看起来，这类人非常自信，有不少是因为他个人只要付出努力，就能攫取巨大的成功，如果他忽视掉努力以外的因素，譬如家境、譬如运气，可能会觉得世上的人不快乐，都是因为不努力。</p><p>写到这里，意识到落了俗套。我心里不觉得涵养和钱有关系，但又不得不承认，有些事，没钱做不出来。打车回家就是隐隐比等公交车来得爽快，没钱是无法逃掉束缚的。</p><p>我不知道什么时候我也能做到如此宠辱不惊。</p><p>宠辱不惊是我从大学里学到最特别的东西，因为见识了实实在在的风度，自然而然地心境愈发平和。可惜的是，年轻是另一种特性，我还是有相当的表现欲和幼稚，会把情绪写在脸上，我不曾后悔，我以为，年少不气盛，难道老了再动吗。</p><p>顺其自然，不同阶段做不同的人。</p><h3 id="学徒与熟练工与废物"><a href="#学徒与熟练工与废物" class="headerlink" title="学徒与熟练工与废物"></a>学徒与熟练工与废物</h3><p>用学徒自称，表示我需要更多的学习。</p><p>虽然书上说，只需要两三年，就能成为熟练工，但如今，我仍然时常认为，自己像个废物，都别说是个学徒了。有时候是自谦，有时候是真的被某些恼人的问题打击到失去自信。</p><p>久而久之，也渐渐习惯了这种状态，一会觉得自己天下第一，一会觉得啥也不会，就这样起起伏伏，度过了大学四年。</p><p>我在尽力让这个波动变小，好让我长期处于一种，知之为知之，不知为不知的稳定状态。</p><h3 id="天高任鸟飞"><a href="#天高任鸟飞" class="headerlink" title="天高任鸟飞"></a>天高任鸟飞</h3><p>毕业设计答辩，就像小学时候去医院打疫苗，进门前紧张得说不出话，进去就一瞬间清凉，结束了。</p><p>用现在的话说就是，就这？</p><p>问题问的多了，怕老师们觉得是做的不好，说的不好。</p><p>问题问的少了，又暗自担忧是不是工作没有亮点，不入老师的法眼。</p><p>就这样反复纠结中。</p><p>我，毕业了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;既是完结，也是序章&quot;&gt;&lt;a href=&quot;#既是完结，也是序章&quot; class=&quot;headerlink&quot; title=&quot;既是完结，也是序章&quot;&gt;&lt;/a&gt;既是完结，也是序章&lt;/h2&gt;&lt;h3 id=&quot;海阔凭鱼跃&quot;&gt;&lt;a href=&quot;#海阔凭鱼跃&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Graduation" scheme="http://veiasai.github.io/tags/Graduation/"/>
    
  </entry>
  
  <entry>
    <title>vue入门</title>
    <link href="http://veiasai.github.io/2020/04/02/vue%E5%85%A5%E9%97%A8/"/>
    <id>http://veiasai.github.io/2020/04/02/vue%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-02T16:17:46.000Z</published>
    <updated>2023-11-06T04:04:47.650Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前，很认真地学习了html、css、es6，上手了颇为超前的MVVM框架React，<br>那时候很喜欢React中纯组件化地概念，尤其是React Router的设计，并且，Redux所推崇的<br>函数式也是吹牛逼的资本。</p><p>最近又重回前端，写了两个小网站，试了试Vue和全新的Typescript，以及api管理工具rap和yapi。稍作整理。</p><h2 id="vue启动"><a href="#vue启动" class="headerlink" title="vue启动"></a>vue启动</h2><p>现在已经很少有人，从零搭建项目了，也就是自己配置webpack，安装一些开发插件。<br>这些配置主要涵盖以下几点：</p><ol><li>开发时的lint，语言特性支持。</li><li>编译流程，尤其是使用到js新特性，都会用babel翻译一遍，然后像less、sass等样式配置，<br>也需要对应的loader进行翻译。</li><li>开发时用的本地server，可以在本地运行一个web server，供开发者查看网页效果。</li><li>热加载插件，每次修改代码，就马上重新编译，刷新页面。有时候甚至只是局部刷新，并不重新加载页面。</li><li>打包发布，这里还得包括用到的图标、图片，一些文本。通常会配置多个版本，不同之处在于是否压缩，是否携带debug信息。</li></ol><p>使用vue cli可以很轻松地构建一个具备这些功能的开发环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line"></span><br><span class="line">vue create your-app-name</span><br></pre></td></tr></table></figure><p>选择手动控制可以细粒度地选择一些特性，<br>我一般会打开typescript、eslint。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">├── .browserslistrc</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .eslintrc.js</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── index.ts</span><br><span class="line">│   │   └── request.ts</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── main.ts</span><br><span class="line">│   ├── router</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── shims-tsx.d.ts</span><br><span class="line">│   ├── shims-vue.d.ts</span><br><span class="line">│   ├── store</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   └── views</span><br><span class="line">│       └── Home.vue</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── yarn.lock</span><br><span class="line">└── ytt.config.ts</span><br></pre></td></tr></table></figure><p>几个配置文件都相当短，vue的插件封装了许多功能，<br>有点类似java里的springboot-compiler-plugin。</p><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><p>Vue给用户看到的也就是一个树状结构的组件视图，一般叫做虚拟DOM树。<br>从代码来看，index.html里放了一个带id的标签，然后js里，<br>vue的mount函数，使用了这个id。整个由vue构建的视图就插入到了这个标签中。</p><p>初始化vue的时候，router和全局状态管理vuex就被传递了进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-layout</span> <span class="attr">id</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-header</span> <span class="attr">style</span>=<span class="string">"padding: 0;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 20px; color: #ffffff"</span>&gt;</span>HCloud Web<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a-layout-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a-layout-content</span> <span class="attr">:style</span>=<span class="string">"&#123; margin: '24px 16px', padding: '24px', background: '#fff', minHeight: '600px' &#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a-layout-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此，App.vue就相当于是Root。<br>这里就可以按照html的写法，组织标签了。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>不同的是，vue的template里可以使用各种自定义组件。<br>如上文中的<code>&lt;a-xxx&gt;</code>标签，都是引用自antd的组件。不过实际上引入antd用的是Vue.use()，<br>按官方说法，这是引入的plugin，会调用目标的intall方法，相当于一个hook。全局组件的注册使用<code>Vue.component( id, [definition] )</code>。</p><p>我们自己写的组件，一般不会注册到全局，那样比较混乱。只有基础、常用的组件会注册到全局，<br>而这些组件都会有各种库提供。</p><p>引入自己写的组件可以用import语句，直接引入那个vue文件。然后放到components属性下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CustomComponent <span class="keyword">from</span> <span class="string">'@/src/components/custom.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA,</span><br><span class="line">    <span class="string">'component-b'</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue class</span></span><br><span class="line"><span class="comment">// other options should be placed in component function</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    AceEditor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件属性绑定"><a href="#组件属性绑定" class="headerlink" title="组件属性绑定"></a>组件属性绑定</h3><p>正如在代码中看到的，每个标签都或多或少有一些属性值。<br>属性的传入直接在标签上填写即可，代表的是一个常量。<br>如果要传递变量，就需要使用vue提供的特殊方法。<br>常用的有v-bind、v-once、v-on。具体含义参考手册。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post v-bind:title=<span class="string">"post.title"</span>&gt;&lt;<span class="regexp">/blog-post&gt;</span></span><br></pre></td></tr></table></figure><p>对于组件自身，props可以直接访问，就如同它自己的属性一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AceEditorProps = Vue.extend(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AceEditor</span> <span class="keyword">extends</span> <span class="title">AceEditorProps</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> message (): string &#123;</span><br><span class="line">    <span class="comment">// this.name will be typed</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局中心存储"><a href="#全局中心存储" class="headerlink" title="全局中心存储"></a>全局中心存储</h2><p>在我看来，只有props需求的组件，复用性很好，即插即用。<br>但真正做一个网页，或者说一个项目的时候。很多页面是单例模式：<br>组件或许可以复用，但在这个项目里，它绝对只会出现一次，数据也只有一份。<br>比如说，购物车，网页主页，个人中心。</p><p>这些页面显然也是由组件堆叠起来的，但它们整体是不可复用的，也不需要复用。<br>当你想要制作两个购物车页面，那就得有两份不同的购物车数据，两份路由，<br>这是不可复用的根源，同时也没有必要做这种事情。</p><p>因此，这些数据是唯一的情景下，很适合将数据抽离出来，存放到全局存储中。<br>某种程度上，这也是无奈之举，谈不上多好的设计，是一个非常自然的想法：<br>数据是唯一的，那就必然要交给一个唯一的对象去管理。<br>如果类似组件的属性那样管理，这个数据传递起来会非常麻烦，<br>子组件都必须通过props层层传递，而修改的入口也没有限定。<br>正因为有种种不便之处，才开发出一个中心存储，再通过一些奇技淫巧，<br>使得所有组件都能访问到这个中心存储。</p><p>Vue的中心存储叫做Vuex。<br>提供Store、Mutation、Action、Module四个接口。</p><p>Store非常好理解，就是刚才说的中心存储。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.p</span><br></pre></td></tr></table></figure><p>像这样访问属性的方式，就可以访问store的数据。<br>如果想把这些数据使用到组件中，那么需要再套一层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    p() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据vuex的要求，修改属性一定要通过mutation，不能直接给state赋值。<br>从原理上说，修改属性这个操作，是必须要被监控到的，因为它可能触发DOM的改变。<br>通过mutation来修改属性，就有了一个明显的切面去监控数据变化。<br>但是实际上实现这个监控，手法有很多，也是有可能实现成，直接赋值，也被监控到的。<br>不过，使用mutation还有一个好处是，数据的改变方式是固定的，甚至可以加上类型限定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// component method</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p>Mutation都是同步方法，如果想要实现异步接口，就得用Action。<br>Promise就不展开讲了。<br>经过我尝试，async也是可以用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// async, this is not a good example</span></span><br><span class="line"><span class="comment">// because setTimeout is not 'promisefy'</span></span><br><span class="line">  <span class="keyword">async</span> actionB (&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'someMutation'</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Module就是提供树状层次，让状态不必全部集中到一个入口上，而是分散在不同模块中。</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>Vue的路由和React差异很大。React自Router 4.0之后，Router就和普通组件一模一样，<br>直接嵌入到页面中即可。</p><p>Vue的路由采取的是slot的方式。先填一些占位符，再在Router初始化时，统一定义每个占位符。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Info <span class="keyword">from</span> <span class="string">'@/views/FunctionInfo.vue'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Editor <span class="keyword">from</span> <span class="string">'@/views/Editor.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/function/:id'</span>,</span><br><span class="line">    component: Info</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/newfunction'</span>,</span><br><span class="line">    component: Editor</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>嵌套路由就是在子组件里面也放上<code>&lt;router-view&gt;</code>，在routes定义中使用<code>children</code>。<br>详情看手册把，不赘述了。</p><p>路由的改变也提供了一个封装的link组件。<br>但实际上就是通过<code>this.$router</code>所携带的各种方法操作路由。<br>详情见手册。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很久以前，很认真地学习了html、css、es6，上手了颇为超前的MVVM框架React，&lt;br&gt;那时候很喜欢React中纯组件化地概念，尤其是React Router的设计，并且，Redux所推崇的&lt;br&gt;函数式也是吹牛逼的资本。&lt;/p&gt;
&lt;p&gt;最近又重回前端，写了两个小</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Vue" scheme="http://veiasai.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB混合编程</title>
    <link href="http://veiasai.github.io/2020/03/29/MATLAB%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/"/>
    <id>http://veiasai.github.io/2020/03/29/MATLAB%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B/</id>
    <published>2020-03-29T20:18:05.000Z</published>
    <updated>2023-11-06T04:04:47.634Z</updated>
    
    <content type="html"><![CDATA[<p>出于一些奇怪的原因，尝试了一把MATLAB混合编程。<br>Java等语言更适合搭建Web Server，处理文件，而MATLAB有许多优秀的内置函数，用起来十分方便。<br>两者结合，就能写出提供一些计算函数的后端服务，配合上前端，就能在网页上用MATLAB了。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用其他编程语言调用MATLAB，有两种办法，一种是使用MATLAB ENGINE的API，另一种是MATLAB COMPILER将MATLAB函数打包成其他语言的形式。<br>我主要使用第二种，原因是在部署机上没有MATLAB的LICENSE，而且也不想在每个Server上都运行一个完整的MATLAB。第二种方式，最终执行函数的机器，<br>只需要安装了MCR（MATLAB COMPILER RUNTIME）就可以了。</p><h2 id="MATLAB-COMPILER-RUNTIME"><a href="#MATLAB-COMPILER-RUNTIME" class="headerlink" title="MATLAB COMPILER RUNTIME"></a>MATLAB COMPILER RUNTIME</h2><p>在官网上下载安装包，按照步骤安装即可，但要注意版本保证和MATLAB的版本一致。</p><h2 id="MATLAB-COMPILER"><a href="#MATLAB-COMPILER" class="headerlink" title="MATLAB COMPILER"></a>MATLAB COMPILER</h2><p>安装MATLAB的时候勾选这类产品即可。</p><p>使用时，在命令行输入<code>deploytools</code>即可调出界面，在里面配置好编译的选项。</p><p>对于JAVA Library，需要勾选输入的.m文件，设定Java类名，检查方法名。<br>JAVA_HOME一定要设置对，COMPILER会使用到javac进行编译。<br>最后打包出来就是一个jar包，在项目中导入使用即可。<br>Java应用还需要导入<code>javabuiler.jar</code>，这个包在MATLAB或者MCR的安装目录下都会有。</p><p>以Linux上的v95版本MCR为例（对应MATLAB 2018b），路径为<br><code>/usr/local/MATLAB/MATLAB_Runtime/v95/toolbox/javabuilder/jar/javabuiler.jar</code></p><h2 id="Call-MATLAB-Function-From-JAVA"><a href="#Call-MATLAB-Function-From-JAVA" class="headerlink" title="Call MATLAB Function From JAVA"></a>Call MATLAB Function From JAVA</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% usersolve.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[outputArg1,outputArg2, outputArg3]</span> = <span class="title">usersolve</span><span class="params">(arg)</span></span></span><br><span class="line">options = optimoptions(<span class="string">'fsolve'</span>,<span class="string">'Display'</span>,<span class="string">'off'</span>);</span><br><span class="line">[outputArg1, outputArg2, outputArg3] = fsolve(@InputSolve, arg, options);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>打包成<code>usersolve.jar</code>，放到java项目的lib目录下，添加maven引用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>algo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>usersolve<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/usersolve.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller代码。这里我犯了一个错误，我以为MCR会如同MATLAB一样，从Documents/MATLAB目录下加载.m文件。但是其实，MCR只能执行编译过的文件，而且会为这些具体函数建立一个cache，目录为<code>$USER_HOME/.mcrCache9.5/userso2/</code>。<br>这个目录里可以看到，所有的函数都是二进制格式。<br>所以我虽然接收并存储了用户的函数代码，但实际上执行的还是之前打包进来的InputSolve函数，并不能动态加载函数，这是个失败例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSolve</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserSolveService userSolveServicej;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/usersolve"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> UserSolveResponseBody <span class="title">userSolve</span><span class="params">(@RequestBody UserSolveBody userSolveBody)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UserSolveResponseBody userSolveResponseBody = <span class="keyword">new</span> UserSolveResponseBody();</span><br><span class="line">        String funcFile = System.getProperty(<span class="string">"juser.home"</span>) + <span class="string">"/Documents/MATLAB/InputSolve.m"</span>;</span><br><span class="line">        OutputStream f = <span class="keyword">new</span> FileOutputStream(funcFile);</span><br><span class="line">        f.write(userSolveBody.getFunction().getBytes());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] res = userSolveService.solve(userSolveBody.getSolution());</span><br><span class="line">            userSolveResponseBody.setFlag(((MWNumericArray)res[<span class="number">2</span>]).getInt());</span><br><span class="line"></span><br><span class="line">            List&lt;List&lt;Double&gt;&gt; x = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Object[] xObj = ((MWNumericArray) res[<span class="number">0</span>]).toArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; xObj.length; i++) &#123;</span><br><span class="line">                x.add(DoubleStream.of((<span class="keyword">double</span>[]) xObj[i]).boxed().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            userSolveResponseBody.setX(x);</span><br><span class="line">            List&lt;List&lt;Double&gt;&gt; fval = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Object[] fvalObj = ((MWNumericArray) res[<span class="number">1</span>]).toArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fvalObj.length; i++) &#123;</span><br><span class="line">                fval.add(DoubleStream.of((<span class="keyword">double</span>[]) fvalObj[i]).boxed().collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            userSolveResponseBody.setFval(fval);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MWException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            userSolveResponseBody.setErrorInfo(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userSolveResponseBody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSolveService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserSolve userSolve;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserSolveService</span><span class="params">()</span> <span class="keyword">throws</span> MWException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userSolve = <span class="keyword">new</span> UserSolve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] solve(List&lt;List&lt;Double&gt;&gt; solution) <span class="keyword">throws</span> MWException &#123;</span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[solution.size()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; solution.size(); i++) &#123;</span><br><span class="line">            objects[i]  = solution.get(i).toArray();</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] result = &#123;<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>&#125;;</span><br><span class="line">        Object[] input = &#123;objects&#125;;</span><br><span class="line">        userSolve.usersolve(result, input);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有意思的事情是，给MATLAB函数传参数，统统都是用Object[]。<br>并且对象数组可以嵌套，而可用的基本类型有double、int、long。<br>matlab里的矩阵就可以用<code>double[][]</code>表示，虽然先声明<code>Object[]</code>，<br>在逐层向里面加入数据更为灵活。</p><p>MATLAB返回的参数，要么会用NumericArray包装，要么就是裸的数据类型。<br>只是，不同的内置函数的返回类型究竟对应什么，我也没有弄很清楚。</p><p>函数画图可以采用webfigure，java这里就对应jsp。</p><p>springboot里要启用jsp，添加如下参数。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.mvc.view.prefix=/WEB-INF/jsp/</span></span><br><span class="line"><span class="string">spring.mvc.view.suffix=.jsp</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"MyFigure"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weibull</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeibullService weibullService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/weibull"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">weibull</span><span class="params">(@RequestBody WeibullInputBody weibullInputBody, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MWNumericArray numericArray = (MWNumericArray) weibullService.evaluate(weibullInputBody.getData());</span><br><span class="line">            model.addAttribute(<span class="string">"a1"</span>, numericArray.getDouble(<span class="number">1</span>));</span><br><span class="line">            model.addAttribute(<span class="string">"a2"</span>, numericArray.getDouble(<span class="number">2</span>));</span><br><span class="line">            model.addAttribute(<span class="string">"MyFigure"</span>, weibullService.plot(numericArray));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MWException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"weibull"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"wf"</span> uri=<span class="string">"http://www.mathworks.com/builderja/webfigures.tld"</span> %&gt;</span><br><span class="line">&lt;wf:web-figure name=<span class="string">"MyFigure"</span> scope=<span class="string">"session"</span>/&gt;</span><br></pre></td></tr></table></figure><p>但是，这个jsp里的web-figure会被替换成一段iframe，然后指向了地址<code>$HOST/WebFigures/$name</code>。也就是说，还会有二次请求，那么显然这个地址会404，因为我们没有配置关于这个地址的处理函数。<br>实际上它的处理函数应该对应MATLAB提供的一个Servlet：<br><code>com.mathworks.toolbox.javabuilder.webfigures.WebFiguresServlet</code>。</p><p>那么springboot里怎么简单地加入一个别人写的servlet呢，<br>因为我只找到了一个<code>WebServlet</code>注解，然后它只能加在某个类上，<br>又因为这个类不是我写的，我只能使了个小技巧，继承了这个类。<br>或者退回到使用mvc的方式，在web.xml里写servlet标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"MyServlet"</span>,urlPatterns = <span class="string">"/WebFigures/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Webfigure</span> <span class="keyword">extends</span> <span class="title">WebFiguresServlet</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App处加上扫描Servlet的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MATLAB 函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">df</span> = <span class="title">getWebFigure</span><span class="params">()</span></span></span><br><span class="line">    f=<span class="built_in">figure</span>(<span class="string">'Visible'</span>, <span class="string">'off'</span>);</span><br><span class="line">    <span class="comment">% plot()</span></span><br><span class="line">    df = webfigure(f)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>JAVA接收webfigure。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((MWJavaObjectRef)result[<span class="number">0</span>]).get()</span><br><span class="line"><span class="comment">// 然后把这个对象设置成session的key-value</span></span><br><span class="line"><span class="comment">// key为jsp中对应的figure name</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;出于一些奇怪的原因，尝试了一把MATLAB混合编程。&lt;br&gt;Java等语言更适合搭建Web Server，处理文件，而MATLAB有许多优秀的内置函数，用起来十分方便。&lt;br&gt;两者结合，就能写出提供一些计算函数的后端服务，配合上前端，就能在网页上用MATLAB了。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Matlab" scheme="http://veiasai.github.io/tags/Matlab/"/>
    
  </entry>
  
  <entry>
    <title>openstack单机多网卡</title>
    <link href="http://veiasai.github.io/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/"/>
    <id>http://veiasai.github.io/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/</id>
    <published>2020-03-26T17:14:46.000Z</published>
    <updated>2023-11-06T04:04:47.642Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前，搭建好openstack的时候，惊奇地发现，<br>一个虚拟机可以绑定很多个interface，或者说port。</p><p><img src="/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/C9104E0D-4083-451E-B470-0F9A97189123.png" alt="图片加载失败"></p><p>奇怪的事情是，如果在创建虚拟机时，绑定多个接口，初始化出来的虚拟机，将会无法连接。<br>也就是说，多个接口并没有成功初始化。</p><p><img src="/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/WX20200326-172148@2x.png" alt="图片加载失败"></p><p>绑定多个interface，在虚拟机看来就是插入了多张网卡。<br>观察机器的启动日志，发现初始化时只会启动一张网卡，也就是顺序最靠前的网卡，<br>但是哪张最靠前，是随机的。所以，通常是因为两张卡中只有一张是连接到外部网络的，<br>如果第一张初始化的就是内部网络的，就没法连接到机器上了。</p><p>这一点应该可以通过修改镜像里的初始化操作来让他多个卡都初始化，<br>这里先不谈如何全自动，讨论一下如何手动操作。</p><p>首先，按正常的操作，选取一个网络加入，创建虚拟机。<br>这时能够正常ssh到机器上。</p><p>以ubuntu为例。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/network/interfaces</span></span><br><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># and how to activate them. For more information, see interfaces(5).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="comment"># Source interfaces</span></span><br><span class="line"><span class="comment"># Please check /etc/network/interfaces.d before changing this file</span></span><br><span class="line"><span class="comment"># as interfaces may have been defined in /etc/network/interfaces.d</span></span><br><span class="line"><span class="comment"># See LP: #1262951</span></span><br><span class="line"><span class="built_in">source</span> /etc/network/interfaces.d/*.cfg</span><br></pre></td></tr></table></figure><p>而<code>interfaces.d</code>里只有一个文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interfaces.d/50-cloud-init.cfg</span></span><br><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens3</span><br><span class="line">iface ens3 inet dhcp</span><br></pre></td></tr></table></figure><p>这里定义了网卡的配置，通常来说，<br>一个接口要生效，需要配置自身的IP地址，DNS Server，接入的子网掩码。<br>像这个文件里只写了一行，dhcp，因为dhcp协议会通过广播去请求这些数据，<br>dhcp server会告诉我们应该用什么ip、dns。</p><p>接下来，给机器绑定更多的接口。</p><p><img src="/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/WX20200326-173043@2x.png" alt="图片加载失败"></p><p>然后在连接到机器上，用<code>ip addr</code>命令查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo ip addr</span><br><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether fa:16:3e:33:0f:58 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.54/16 brd 10.0.255.255 scope global ens3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f816:3eff:fe33:f58/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: ens7: &lt;BROADCAST,MULTICAST&gt; mtu 1450 qdisc pfifo_fast state DOWN group default qlen 1000</span><br><span class="line">    link/ether fa:16:3e:ca:fb:f5 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>可以看到，多了一个ens7。<br>使用<code>ifup ens7</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ifup ens7</span><br><span class="line"></span><br><span class="line">Unknown interface ens7</span><br></pre></td></tr></table></figure><p>现在还无法启动这个interface，因为还没有配置。<br>转到<code>/etc/network/interfaces</code>，添加<code>ens7</code>的配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/network/interfaces.d/50-cloud-init.cfg</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto ens3</span><br><span class="line">iface ens3 inet dhcp</span><br><span class="line"></span><br><span class="line">auto ens7</span><br><span class="line">iface ens7 inet dhcp</span><br></pre></td></tr></table></figure><p>然后，<code>sudo ifup ens7</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Internet Systems Consortium DHCP Client 4.3.3</span><br><span class="line">Copyright 2004-2015 Internet Systems Consortium.</span><br><span class="line">All rights reserved.</span><br><span class="line">For info, please visit https://www.isc.org/software/dhcp/</span><br><span class="line"></span><br><span class="line">Listening on LPF/ens7/fa:16:3e:ca:fb:f5</span><br><span class="line">Sending on   LPF/ens7/fa:16:3e:ca:fb:f5</span><br><span class="line">Sending on   Socket/fallback</span><br><span class="line">DHCPDISCOVER on ens7 to 255.255.255.255 port 67 interval 3 (xid=0x8924d41)</span><br><span class="line">DHCPREQUEST of 10.1.0.8 on ens7 to 255.255.255.255 port 67 (xid=0x414d9208)</span><br><span class="line">DHCPOFFER of 10.1.0.8 from 10.1.0.2</span><br><span class="line">DHCPACK of 10.1.0.8 from 10.1.0.2</span><br><span class="line">bound to 10.1.0.8 -- renewal <span class="keyword">in</span> 34076 seconds.</span><br></pre></td></tr></table></figure><p>配置完毕，现在就拥有了两个网卡。</p><p>如果和一个网络建立多个interfaces，就相当于有多根网线插入到一个交换机上。<br>然后将其中一个网卡交给dpdk管理，监听另一个网卡，就可以实现一个机器测试dpdk功能了。</p><p>需要注意的是，关闭掉interface的security功能，避免dpdk编程时，一些包被openstack丢弃。</p><p><img src="/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/WX20200326-173854@2x.png" alt="图片加载失败"></p><p><img src="/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%E5%8D%A1/1585215611440.jpg" alt="图片加载失败"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很久以前，搭建好openstack的时候，惊奇地发现，&lt;br&gt;一个虚拟机可以绑定很多个interface，或者说port。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/03/26/openstack%E5%8D%95%E6%9C%BA%E5%A4%9A%E7%BD%91%</summary>
      
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Network" scheme="http://veiasai.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>人生备份</title>
    <link href="http://veiasai.github.io/2020/03/13/%E4%BA%BA%E7%94%9F%E5%A4%87%E4%BB%BD/"/>
    <id>http://veiasai.github.io/2020/03/13/%E4%BA%BA%E7%94%9F%E5%A4%87%E4%BB%BD/</id>
    <published>2020-03-13T11:57:58.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>虽然没有心情每天写日记，但打算大致记录一下轨迹上的风景。</p><p>书：</p><ul><li><p>2016-2019</p></li><li><p>借我一生 白夜行 千年一叹 一花一世界 等一个人咖啡 我不喜欢这世界，我只喜欢你</p></li><li><p>那些年我们一起追过的女孩 全职高手 少年歌行 人生最厉害的就是这个BUT</p></li><li><p>占星术杀人魔法 钟表馆 二钱铜币 龙与少年游 舞！舞！舞！ 人情-世故 知情识趣</p></li><li><p>万水千山走遍 世界将我包围 雨季不再来</p></li><li><p>青铜时代 白银时代 黄金时代 杀人鬼 怪胎</p></li><li><p>超新星纪元 爱情，两好三坏 打喷嚏</p></li><li><p>代码整洁之道 程序员的职业素养 萤 青春</p></li><li><p>国境以南太阳以西 世界尽头与冷酷仙境</p></li><li><p>十八岁给我一个姑娘 动物凶猛 世事如烟 金色梦乡</p></li><li><p>神探伽利略 春风沉醉的晚上 直捣蜂窝的女孩</p></li><li><p>欢喜 北京，北京 三十六大 万物生长 活着活着就老了</p></li><li><p>御手洗洁的舞蹈 亮剑</p></li><li><p>左心房漩涡 碎琉璃 千手捕蝶 情人眼 活到老真好</p></li><li><p>精通正则表达式 树莓派用户指南 测试驱动开发</p></li><li><p>林海雪原 深入浅出React和Redux Kubernetes权威指南</p></li><li><p>人月神话 软件开发者路线图 Docker经典实例</p></li><li><p>编程大师访谈录 编程之魂 时间旅行者的妻子</p></li><li><p>调试九法 Haskell函数式程序设计 御手洗洁的问候</p></li><li><p>深入剖析Tomcat Spring技术内幕 第一本Docker书</p></li><li><p>精通Hibernate 人间失格 Neo4j实战</p></li><li><p>元素模式 虚拟智慧 容器即服务</p></li><li><p>Apache Kafka实战 x86汇编语言从实模式到保护模式 汇编语言 Python科学计算</p></li><li><p>你想活出怎样的人生 人生的智慧 原来你非不快乐</p></li><li><p>穿越计算机的迷雾 让我留在你身边 从你的全世界路过</p></li><li><p>送你一颗子弹 余生，请多指教</p></li><li><p>你好，旧时光 暗恋，橘生淮南 最好的我们</p></li><li><p>芳华 黑客与画家 断舍离</p></li><li><p>2020</p></li><li><p>面纱 封神演义 刘慈欣短篇小说集 环界 独眼少女</p></li><li><p>喜欢你是寂静的：林徽因传 醒来觉得甚是爱你</p></li><li><p>浪潮之巅 李银河说爱情 聊斋志异 无人生还 狼图腾</p></li><li><p>design-and-evolution-of-cpp option-volatility-and-pricing</p></li></ul><p>音乐：</p><ul><li><a href="http://url.cn/5Zuka3O" target="_blank" rel="noopener">2019歌单</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然没有心情每天写日记，但打算大致记录一下轨迹上的风景。&lt;/p&gt;
&lt;p&gt;书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2016-2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;借我一生 白夜行 千年一叹 一花一世界 等一个人咖啡 我不喜欢这世界，我只喜欢你&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Life" scheme="http://veiasai.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Golang的奇妙之旅</title>
    <link href="http://veiasai.github.io/2020/02/24/Golang%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/"/>
    <id>http://veiasai.github.io/2020/02/24/Golang%E7%9A%84%E5%A5%87%E5%A6%99%E4%B9%8B%E6%97%85/</id>
    <published>2020-02-24T19:50:43.000Z</published>
    <updated>2023-11-06T04:04:47.630Z</updated>
    
    <content type="html"><![CDATA[<p>实践过程中的一些小问题。</p><a id="more"></a><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li><p>Golang的包管理极其玄幻，在1.11以前，依赖库均下载到GOPATH/src，安装到GOPATH/pkg。首先，难以维护多个版本，或者说对依赖库就没有版本的限定，其次，正在开发的项目也要放到GOPATH里，整个依赖树才能正常运行。</p></li><li><p>Go 1.11之后，Go modules略微改善了这个状况，在我的视角来看，现在的包管理变成：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init</span><br><span class="line">go get xxx</span><br></pre></td></tr></table></figure><p>也不用再配置GOPATH，默认为用户目录，下载的包位置即<code>~/go/pkg/mod</code>。在项目里多了go.mod和go.sum两个文件，以控制依赖库的版本。</p></li><li><p>有趣的是，不一定要先go get，在源码里直接import之后，go build会自动将依赖下载并添加到go.mod中。<code>go mod tidy</code>则用来去除多余的依赖。</p></li></ul><h2 id="切片类型"><a href="#切片类型" class="headerlink" title="切片类型"></a>切片类型</h2><ul><li>Golang的切片类型十分有趣，从原理上讲，它是一个特殊的结构，包含指向相关数组的指针，切片长度以及切片容量。</li><li>切片只是底层数组的一个片段引用，比裸指针使用起来多了更多检查，不至于Segmentation fault。</li><li>append函数，可以将一个或多个新元素追加到某个切片后，当底层数组的长度足够，那就只需要修改切片长度，并且复制元素。当底层数组cap用尽，append会分配一块新的内存，并将原有数组拷贝。很显然，这时指针会发生变化，因此，append总是以<code>a = append(a, x1, x2)</code>形式出现。</li></ul><h2 id="非侵入式接口"><a href="#非侵入式接口" class="headerlink" title="非侵入式接口"></a>非侵入式接口</h2><ul><li>真正的鸭子类型，并且在编译期就做足了检查，非常美妙。</li><li>只要一个struct实现了某个interface要求的所有接口，那它就可以被当作interface类型，不需要声明implement。</li><li>感觉对代码重构提供不少便利，也不必先设计接口再实现，只管先实现一些模块，当发现方法和参数相同或接近时，再稍作调整，外部声明一个interface，就可以实现多态的用法。</li></ul><h2 id="if-err的哲学"><a href="#if-err的哲学" class="headerlink" title="if err的哲学"></a>if err的哲学</h2><ul><li><p>Golang的代码里，if err满天飞。</p></li><li><p>典型的C风格错误处理，try catch主要的好处是可以跨层抛出，将错误处理留给外层合适的函数来处理。使用return的方式抛出异常，则需要调用链上的每一层都写错误处理代码，冗余很多。</p></li><li><p>此外，Golang的函数并不声明返回的err具体包括哪些类型，往往需要付出更多代价，查阅源码或文档，才能写好错误处理。</p></li><li><p>error本身只是一个接口，里面只有一个error() string 方法，返回错误信息。官方建议是，每个错误都声明新的类型，实现error方法，上层用type-switch判断错误类型。</p>  <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> t := areaIntf.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *Square:</span><br><span class="line">    fmt.Printf(<span class="string">"Type Square %T with value %v\n"</span>, t, t)</span><br><span class="line"><span class="keyword">case</span> *Circle:</span><br><span class="line">    fmt.Printf(<span class="string">"Type Circle %T with value %v\n"</span>, t, t)</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"nil value: nothing to check?\n"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"Unexpected type %T\n"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>哲学在于一句话：让代码更容易看出控制流走向。虽然if-err结构很多，但它也算是让代码更可读了。</p></li></ul><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><ul><li>编写网络服务的过程中，很自然地想要使用epoll去管理网络连接。随后我发现，Golang中的网络库已经结合了epoll。</li><li>简而言之，只需要创建多个Go routine，直接以同步阻塞的方式去编写代码。</li></ul><h2 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h2><ul><li>算是对结构体的一种超级加强。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> innerS <span class="keyword">struct</span> &#123;</span><br><span class="line">    in1 <span class="keyword">int</span></span><br><span class="line">    in2 <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> outerS <span class="keyword">struct</span> &#123;</span><br><span class="line">    b    <span class="keyword">int</span></span><br><span class="line">    c    <span class="keyword">float32</span></span><br><span class="line">    <span class="keyword">int</span>  <span class="comment">// anonymous field</span></span><br><span class="line">    innerS <span class="comment">//anonymous field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在结构体里直接写某一种类型名，同种类型只能写一个，这时使用<code>o.in2</code>直接访问内嵌的数据。</li><li>显然，会出现命名冲突的情况，首先外层地会覆盖内层，如果同级，则程序员显式地指出<code>o.innerS.in2</code>。</li><li>当一个匿名类型被内嵌在结构体中时，匿名类型的可见方法也同样被内嵌，这在效果上等同于外层类型继承了这些方法：将父类型放在子类型中来实现亚型。这个机制提供了一种简单的方式来模拟经典面向对象语言中的子类和继承相关的效果，也类似 Ruby 中的混入（mixin）。</li></ul><h2 id="一等公民：函数"><a href="#一等公民：函数" class="headerlink" title="一等公民：函数"></a>一等公民：函数</h2><ul><li>Golang中的函数也是可以当作函数参数的类型。</li><li>具备闭包特性。</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>强烈推荐，值得反复查阅： <a href="https://github.com/unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">The way to Go</a></li><li>起步时参考的项目：<a href="https://github.com/drone/drone" target="_blank" rel="noopener">Drone</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;实践过程中的一些小问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Golang" scheme="http://veiasai.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>分我一秒</title>
    <link href="http://veiasai.github.io/2020/02/24/%E5%88%86%E6%88%91%E4%B8%80%E7%A7%92/"/>
    <id>http://veiasai.github.io/2020/02/24/%E5%88%86%E6%88%91%E4%B8%80%E7%A7%92/</id>
    <published>2020-02-24T19:28:00.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>借我一生太长，况且还不起，分我一秒足够。</p><a id="more"></a><h2 id="分秒"><a href="#分秒" class="headerlink" title="分秒"></a>分秒</h2><ul><li>我曾虚度很多时光</li><li>但没有你的时光，都是虚度</li><li>不必可惜</li></ul><h2 id="足不出户"><a href="#足不出户" class="headerlink" title="足不出户"></a>足不出户</h2><ul><li>坐上一整天，哪也不去</li><li>只是随地球旋转，我也走了好远</li><li>离你的距离，是少了一天，又或者多了一天</li></ul><h2 id="火柴"><a href="#火柴" class="headerlink" title="火柴"></a>火柴</h2><ul><li>已经有数年没见过火柴</li><li>如果世上只剩最后一根</li><li>我想擦亮它一定能实现愿望</li></ul><h2 id="这就是爱吗"><a href="#这就是爱吗" class="headerlink" title="这就是爱吗"></a>这就是爱吗</h2><ul><li>难道真的没有人，相信相逢的人会再相逢吗？</li><li>虽然有赌的成分</li><li>但是愿赌服输</li></ul><h2 id="富贵在天"><a href="#富贵在天" class="headerlink" title="富贵在天"></a>富贵在天</h2><ul><li>头一回听你念，生死有命，富贵在天</li><li>后四个字你几乎咬牙切齿，怎么听都是人定胜天</li><li>你光芒四射，唯独少了我</li></ul><h2 id="技术流"><a href="#技术流" class="headerlink" title="技术流"></a>技术流</h2><ul><li>有些人觉得，赢面超过一半就挺好的</li><li>甚至有的人，有一成机会也敢亮剑</li><li>我都不是，我习惯最强者必胜</li></ul><h2 id="尽头"><a href="#尽头" class="headerlink" title="尽头"></a>尽头</h2><ul><li>毕设写到后来，越写越慢</li><li>写到深夜灯光里，眼泪都滴到键盘上</li><li>我真不想离开这里啊</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;借我一生太长，况且还不起，分我一秒足够。&lt;/p&gt;</summary>
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Love" scheme="http://veiasai.github.io/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>关于我爱你</title>
    <link href="http://veiasai.github.io/2020/01/25/%E5%85%B3%E4%BA%8E%E6%88%91%E7%88%B1%E4%BD%A0/"/>
    <id>http://veiasai.github.io/2020/01/25/%E5%85%B3%E4%BA%8E%E6%88%91%E7%88%B1%E4%BD%A0/</id>
    <published>2020-01-25T12:30:06.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>倘若生命有意义，我想就是你。</p><a id="more"></a><h2 id="动物习性"><a href="#动物习性" class="headerlink" title="动物习性"></a>动物习性</h2><p>生物学家观察生物，物理学家观察世界，人类总是从各种各样的现象中总结经验，持续进步。我偶然想到，我的一生其实都在观察自己。</p><p>根据我二十多年的持续跟进调查，我发现我有诸多习性。比如贪玩，时常不正经，知难而退。在贪玩这一项下也有很多分支，像喜欢玩游戏，但也不是那种能玩上一整天的网瘾少年，游玩过的游戏数量也没有很多。</p><p>总之，诸如此类的许多定义，它们背后都有大量的事实支撑。但一定会有人想杠，说你某些定义不对，你这根本算不上贪玩，然后又举出一些别人的例子。我想说，我本不可能用文字精准表达这些观察结果，因为它们源于二十年的时光，假如我精炼程度是十比一，你也需要两年的时光才能体会。而现在你只用了一分钟不到的时间去思考我所说的东西，况且，没有人可以感同身受地领会一段内容。所以，不要杠这些单薄的词语，体会一下我所谓的习性意思。</p><p>后来，我读的书越来越多，走的路越来越长，见的人越来越多，不断地修炼自身，企图达到完美境界，不悲不喜，又能得所有认识的人的喜欢。但是，一些不美的事情总是重演，我在想，是不是某些习性，这一生都无法改正掉了。此外，世上仿佛真的不存在，得所有喜欢的一种状态。有人说，有多少人讨厌，就有多少人喜欢，反之亦然。</p><p>我尚不知道哪些认知是真的，待我大限将近或可体会更深，也可能一生都被错误所蒙蔽，谁又可知呢。</p><h2 id="追求快乐"><a href="#追求快乐" class="headerlink" title="追求快乐"></a>追求快乐</h2><p>我比较之后发现，可以将所有的事情都归结为，追求快乐，追求自身心灵的快乐。这也是某些习性甩不掉的原因，不美的事情会带给我一些快乐。比如在有时间努力的时候，在舒适区里放松。</p><p>但是这种快乐的转化并非固定的，随着我对事物认知的改变，快乐的来源会发生变化，就像有了一千万的人不再为得到一百块而特别开心，读过了富有想象的作品，不再对庸俗的杜撰动容。</p><p>只是人类实在是种聪明的动物，甚至会为未来的快乐做打算。在当下跳出舒适区，是为了未来能有竞争力，夺得更多的资源，从而让自己快乐。我也听说有一种人，视努力为快乐，在努力的过程中就能得到快乐，可能对这种情形来说，舒适区比较大，别人视作痛苦的东西，他们甘之如饴。在我的观察结果里，我不太像这种生物，我的确会在空闲的时间里去学习一些东西，这通常是因为想要认识世界更多，可是一旦发现，学习目标让我当下不快乐的话，我就会退回到更轻松的学习方式里。</p><p>在我的狭隘经济学里，现在的一块钱总是比未来的一块钱价值大。这种狭隘的方式，会让我在某些情况下损失惨重。</p><p>好在对于自我而言，一切都是自定义的，谈不上什么损失了。</p><h2 id="失去神力"><a href="#失去神力" class="headerlink" title="失去神力"></a>失去神力</h2><p>在这漫长的时光里，我们总有许多不快乐。在某些时候，我们失去了定义快乐的神力，截至目前为止的观察结果表明，是他人夺走了这种力量。</p><p>当我不再以孤单的视角审视世界，当我把快乐和旁人建立关系，把快乐源泉转移到需要多个人参与的事情上，我就没法再重定义这份快乐。比方说，我希望我是考试第一名，那也得其他人配合一下，别考那么好了。我想要老板给我快速升职，也得老板同意才行。</p><p>但类似这些愿望，并不总能实现，假如总是实现的话，人不知足，也会提出更进一步的要求，周而复始，终于不能全部实现了。反过来说，少提出一些要求，或许可以更快乐。</p><p>于是，一种全新的自我约束，永恒快乐模式出现了。<br><em>永远不要要求他人</em></p><p>只是颇有些绝灭意味，在这种约束下，人不敢为爱付出，付出了可能就忍不住要求他人回报，从而破坏了神力。</p><p>此外，要求他人，也是躲避不掉的事情，假如我给了医生一笔钱，然后他无动于衷，并不给我治病，这想必谁也顶不住这种欺辱。餐厅拿钱不上菜，司机送错了地方。任谁都会抓狂。</p><p>好在世上有诸多法律，公序良俗，以阻止这种不能容忍的事情。</p><p>唯有爱你这件事，说不上任何委屈。</p><h2 id="我爱你"><a href="#我爱你" class="headerlink" title="我爱你"></a>我爱你</h2><p>写下这个小标题，我想到了许多的我爱你。有父母，有能记起的爱情故事，也有许多悲剧。它们就仿佛被操纵的木偶，被蒙蔽的灵魂，在失去神力之后互帮互助，苦苦支撑。</p><p>真羡慕永远不必清醒的故事。</p><p>修炼再多，我还是经常听见，灵魂深处的低语。</p><p>我爱你，无论春秋。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;倘若生命有意义，我想就是你。&lt;/p&gt;</summary>
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Love" scheme="http://veiasai.github.io/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>如何飞行</title>
    <link href="http://veiasai.github.io/2019/12/30/%E5%A6%82%E4%BD%95%E9%A3%9E%E8%A1%8C/"/>
    <id>http://veiasai.github.io/2019/12/30/%E5%A6%82%E4%BD%95%E9%A3%9E%E8%A1%8C/</id>
    <published>2019-12-30T15:10:05.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>在浩瀚宇宙里，仅有一个你，该多么孤独。</p><a id="more"></a><h2 id="许愿"><a href="#许愿" class="headerlink" title="许愿"></a>许愿</h2><ul><li>生日你都要问我，许了什么愿</li><li>每次我都说，说出来就不灵了</li><li>其实我什么愿也没想出来，眼里都是你</li></ul><h2 id="爱你"><a href="#爱你" class="headerlink" title="爱你"></a>爱你</h2><ul><li>讲个笑话</li><li>我真的想过</li><li>2020年结婚，是一月一号还是五月二十号更好？</li></ul><h2 id="年度歌单"><a href="#年度歌单" class="headerlink" title="年度歌单"></a>年度歌单</h2><ul><li>单曲循环了两百多次</li><li>我骗你说只是因为忘记关机了</li><li>还说歌真的很好听</li></ul><h2 id="晚安"><a href="#晚安" class="headerlink" title="晚安"></a>晚安</h2><ul><li>你是我的安眠药</li><li>也是我的睡不着</li></ul><h2 id="生也有涯"><a href="#生也有涯" class="headerlink" title="生也有涯"></a>生也有涯</h2><ul><li>听说闰正月要再过两百多年，在我永远到不了的时候</li><li>听说长江白鲟已灭绝，在我还没见过的时候</li><li>听说你找到了想要的幸福，在我不曾察觉的时候</li></ul><h2 id="克己复礼"><a href="#克己复礼" class="headerlink" title="克己复礼"></a>克己复礼</h2><ul><li>不见你时，甚是想念</li><li>见了你又无所适从</li></ul><h2 id="词不达意"><a href="#词不达意" class="headerlink" title="词不达意"></a>词不达意</h2><ul><li>上次你发了一张词不达意的海报</li><li>我读出的全是孤独</li><li>后来才懂你有多喜欢那个人</li><li>也好，词不达意</li></ul><h2 id="书海"><a href="#书海" class="headerlink" title="书海"></a>书海</h2><ul><li>要是寻到黄金屋，便可带你遨游世界</li><li>要是寻到颜如玉，就不用再念念不忘</li></ul><h2 id="世界末日"><a href="#世界末日" class="headerlink" title="世界末日"></a>世界末日</h2><ul><li>假使我问你</li><li>明天就是世界末日，我能抱你一下吗</li><li>你可听出这俏皮中的可怜</li></ul><h2 id="醉美人"><a href="#醉美人" class="headerlink" title="醉美人"></a>醉美人</h2><ul><li>我不喝酒，所以从没想象过醉倒在你怀里</li><li>后来才懂，得你拥抱</li><li>比苦酒入喉更难</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;在浩瀚宇宙里，仅有一个你，该多么孤独。&lt;/p&gt;</summary>
    
    
    
    <category term="Story" scheme="http://veiasai.github.io/categories/Story/"/>
    
    
    <category term="Love" scheme="http://veiasai.github.io/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>《JAVA SE 9 核心技术》笔记</title>
    <link href="http://veiasai.github.io/2019/12/26/%E3%80%8AJAVA-SE-9-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://veiasai.github.io/2019/12/26/%E3%80%8AJAVA-SE-9-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-26T13:40:50.000Z</published>
    <updated>2023-11-06T04:04:47.650Z</updated>
    
    <content type="html"><![CDATA[<p>重新入门一下Java，这次，离开了Spring，我必不可能还是废物。</p><a id="more"></a><h2 id="基本编程结构"><a href="#基本编程结构" class="headerlink" title="基本编程结构"></a>基本编程结构</h2><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ul><li>除去几个基本类型，所有的值都是对象，所有的变量都是引用。</li><li>this指针。</li><li>默认初始化：0， false， null。</li><li>final变量，不会再修改的变量，但注意它只是引用，更改目标的属性是可以的。</li><li>静态初始化块，通常用来初始化static数组。</li><li><code>import static java.lang.Math.*</code>，可以不需类名地使用Math静态方法。</li><li>嵌套类，声明在类内部，并且带static修饰，只是多了访问限制。</li><li>内部类，没有static，每个内部类对象都有外部类对象的引用，由此可访问外部的类成员。</li></ul><h2 id="接口和lambda表达式"><a href="#接口和lambda表达式" class="headerlink" title="接口和lambda表达式"></a>接口和lambda表达式</h2><ul><li><p>接口的所有方法默认为public，也可以提供默认实现。</p></li><li><p>Java强制类型转换，为了避免运行时错误，可先用instanceof检测类型。</p></li><li><p>继承接口，extends。</p></li><li><p>一个类可以implements多个接口。</p></li><li><p>定义在接口中的变量，都是public static final，即常量。接口无法定义实例变量，原因是它不描述状态。</p></li><li><p>默认方法使得添加接口方法能和以前的实现兼容，旧的类不需要强制实现新的方法。</p></li><li><p>当从多个接口继承默认方法时，可能会发生冲突，此时需要程序员显式地在子类中重新实现该方法。此时可通过super将实现委托给父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Identified.<span class="keyword">super</span>.getId(); &#125;</span><br></pre></td></tr></table></figure></li><li><p>从java9开始，接口可以有私有方法，通常用来辅助实现default方法。</p></li><li><p>Runnable、Comparator等接口，都只有一个抽象方法。这样的接口被称为函数式接口。Lambda可以简化对函数式接口的使用，一个临时匿名接口实现。</p></li></ul><h2 id="继承与反射"><a href="#继承与反射" class="headerlink" title="继承与反射"></a>继承与反射</h2><ul><li><p>Java使用<code>extends</code>派生一个新类，不支持多继承。</p><ul><li>Python有专门的算法处理菱形继承、交叉继承。</li><li>Cpp支持多继承，使用虚继承处理冗余，调用方法时则需要显式指明。</li><li>Dart支持Mix-in，多继承时，只允许有一个可实例化的父类，其他的都是抽象父类，只有方法。有点像同时继承了类和接口，而接口又有默认实现。</li></ul></li><li><p>子类只能使用父类的public、protected部分，虽然连带private一起继承会多很多有用方法，但破坏了封装性，让父类开发不能随心所欲地修改private部分了。</p></li><li><p>子类必须调用父类的构造函数来初始化，如果没有显式写出，则会使用不带参数的默认构造。</p></li><li><p>子类对象可以被赋值给父类变量，Java的动态方法查找会让子类覆盖方法正常运行。</p></li><li><p>final方法不可被覆盖，final类不可被继承。</p></li><li><p>抽象类，不能实例构造，比接口多了实例变量和构造函数。</p></li><li><p>匿名类，将子类实现直接贴出。双重大括号语法可用来初始化匿名类对象。</p></li><li><p>从类和接口继承了相同的方法时，Java优先使用类方法，不给出编译错误。</p></li><li><p>super关键字用来访问父类的方法和变量。</p></li><li><p>所有的类都继承自Object，所以它们都有如下方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> # 默认打印类名和hashcode</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> # 相等的对象必须有相同的hashCode</span></span><br><span class="line"><span class="function">Class&lt;?&gt; <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">notifyAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>枚举类型</p><ul><li>每个枚举常量都是一个匿名子类，可以有构造函数、方法和域。</li><li>枚举常量初始化在静态成员之前，因此不能在构造函数里引用静态成员，可以在static块中初始化。</li><li>switch枚举。</li></ul></li><li><p>运行时类型信息和资源：Class对象有一些方法帮助获取类型、方法信息。</p></li></ul><h2 id="异常、断言和日志处理"><a href="#异常、断言和日志处理" class="headerlink" title="异常、断言和日志处理"></a>异常、断言和日志处理</h2><h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><ul><li>Java的泛型编程是发布后新加入的特性，为了兼容曾经的代码，使用了一个名为类型擦除的技术。<ul><li>在编译阶段，泛型的类型信息都会被擦除，只有泛型声明的信息保留。因此，getClass得不到运行时T的类型信息。</li><li>在擦除之后，所有的类型都是Object或者Arraylist&lt;Object&gt;。除非声明时有类型限定，则用限定的类型替换Object。</li></ul></li><li>类型擦除和多态的冲突<ul><li>选定一个类型声明一个确定的类，比如C&lt;String&gt;，然后继承这个类后重写泛型方法，将参数改为String，此时希望子类能够在调用时应用多态特性，调用重写的子类方法，但是，String会被擦除，变成Object去处理，JVM无法按照String签名去查找方法。为了解决这个问题，JVM引入了桥方法。即产生一个参数为Object的方法，转换类型后再调用我们重写的方法，这样可以保证JVM在动态查找时，能够找到对应的方法，同时又是按照类型调用相应的方法，实现了多态。</li></ul></li><li>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;重新入门一下Java，这次，离开了Spring，我必不可能还是废物。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Java" scheme="http://veiasai.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>当我写Paper的时候，我在想些什么</title>
    <link href="http://veiasai.github.io/2019/12/21/%E5%BD%93%E6%88%91%E5%86%99Paper%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E5%9C%A8%E6%83%B3%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
    <id>http://veiasai.github.io/2019/12/21/%E5%BD%93%E6%88%91%E5%86%99Paper%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%88%91%E5%9C%A8%E6%83%B3%E4%BA%9B%E4%BB%80%E4%B9%88/</id>
    <published>2019-12-21T11:15:59.000Z</published>
    <updated>2023-11-06T04:04:47.654Z</updated>
    
    <content type="html"><![CDATA[<p>其实一开始我是拒绝的。</p><a id="more"></a><h2 id="学徒时代"><a href="#学徒时代" class="headerlink" title="学徒时代"></a>学徒时代</h2><p>到现在，投身计算机三年多了，有时候觉得自己已逃脱学徒时代，这也是我对校园感到厌倦的原因之一。</p><p>在公司打工的时候，又能找到做学徒的感觉，那种，我什么都做不好的感觉。在为人处事上，怎么和前台中台以及HR小姐姐愉快聊天，怎么和老板打德扑，在技术上，怎么写好代码，不至于让Mentor在我的Commit下疯狂Comment。</p><p>事实上，我特别喜欢我的Mentor，在CPP这个领域，他给我一种错觉，没有他不懂的方面。我也不知道喜欢这个词是否准确，只是用崇拜和钦佩又少了些意思，因为他玩手机的样子，和媳妇甜言蜜语的样子，实在好笑。我总觉得那就是以后的我。</p><p>回到学校，认真体会剩下的学生时代，我承认我有一小段时间的无意义快乐，比如天天打桌球，每天工作一小会就开始玩游戏。这种特别的无意义生活，总让我有回到童年的感觉。那时候能看上一整天的电视，打上一整天的游戏，什么都不用管。我一想到我将变成怎样的巨人，在某个瞬间就学会担负责任，享受大家信任的眼光，我就兴奋且害怕。在很多人看来这是一种能力提高，变得懂事，可是呢，在我看来，更像是抹掉了许多无意义个性，保留别人喜欢的特质。我想做个怪人，仍然得你喜欢。</p><p>现在学期末尾，又被迫充实了一把，洋洋洒洒写了六七页的全英文Paper，我知道其实不算多，但对我真是一种煎熬。这已经不是学徒的感觉了，我回到了初中，被老师指着鼻子骂不识好歹。我想大家把我当个废物，这样我就不用受指责，但同时我又害怕我失去了许多隐藏好处，毕竟不会有人想和废物共事。</p><h2 id="一字并肩"><a href="#一字并肩" class="headerlink" title="一字并肩"></a>一字并肩</h2><p>前两天，一个说自己不喜欢指责的人，指责了我。恕我直言，难以感同身受。但后来我又想到，人总是这样，委屈就要推出来，说给别人，让别人也委屈一下，自己就舒服了。于是，我坦然应下了。</p><p>与此同时，老师和博士大哥，轮番上阵带领我写作。当大哥反问我，论文里的某一句是什么意思的时候，我一脸懵逼，想这一两个词不够明确么。现在我才懂得这个概念是什么，举例说明。</p><p>假如我用一句，The client builds a connection with the broker. 我就得花点笔墨来描述，具体在什么时间建立连接，这个连接共享什么信息，需要维护多久，甚至，为什么可以建立连接也得说明一下，毕竟总得有个address在前。</p><p>在这里我羞耻地用了一字并肩，其实我在拖后腿。</p><h2 id="想"><a href="#想" class="headerlink" title="想"></a>想</h2><p>最后，点一下题，正因为我此时还在接着修改Paper，所以以上所有文字，都是我写Paper时候的所想。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实一开始我是拒绝的。&lt;/p&gt;</summary>
    
    
    
    <category term="Note" scheme="http://veiasai.github.io/categories/Note/"/>
    
    
    <category term="Paper" scheme="http://veiasai.github.io/tags/Paper/"/>
    
  </entry>
  
</feed>
